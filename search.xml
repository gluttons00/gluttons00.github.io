<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MarkDown格式</title>
    <url>/2024/05/03/MarkDown%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="hexo的-md文件开头"><a href="#hexo的-md文件开头" class="headerlink" title="hexo的.md文件开头"></a>hexo的.md文件开头</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">tag: [格式]</span><br><span class="line">第二个 &quot;---&quot; 不用打,按enter即可</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h1 id="hexo缩进"><a href="#hexo缩进" class="headerlink" title="hexo缩进"></a>hexo缩进</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">使用Html的空格符<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;emsp;</span>控制缩进。（噩梦碎片）</span><br><span class="line"></span><br><span class="line"><span class="symbol">&amp;emsp;</span>hello</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>

<p>&emsp;hello</p>
<p>hello</p>
<h1 id="小标题缩进"><a href="#小标题缩进" class="headerlink" title="小标题缩进"></a>小标题缩进</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一级小标题</span></span><br><span class="line">    <span class="number">1</span>.空格 xxx </span><br><span class="line">    <span class="comment">#在 1. 的行末跳格，就可以直接出现 2.</span></span><br><span class="line">    <span class="comment">#在 1. 的下一行输入 2.空格 结果相同</span></span><br><span class="line">    <span class="number">2</span>.空格 yyy</span><br><span class="line">	<span class="comment">#在 n. 的行末直接两次跳格就可以不出现 n+1. 的行首（即空行首）</span></span><br><span class="line"><span class="comment">#二级小标题</span></span><br><span class="line">	<span class="comment">#在 n. 的行末输入一次跳格，一次退格就可以得到二级小标题的空行首</span></span><br><span class="line">	<span class="number">1</span>.空格 xxx </span><br><span class="line">		zzz</span><br></pre></td></tr></table></figure>

<ol>
<li><p>xxx</p>
</li>
<li><p>yyy</p>
<p>zzz</p>
</li>
</ol>
<h1 id="标题-数个”-”-空格-前置"><a href="#标题-数个”-”-空格-前置" class="headerlink" title="标题[数个”#”+空格 前置]"></a>标题[数个”#”+空格 前置]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>

<h1 id="强调-用-“-”-或-“-”-包围"><a href="#强调-用-“-”-或-“-”-包围" class="headerlink" title="强调 [用 “**” 或 “__” 包围]"></a>强调 [用 “**” 或 “__” 包围]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**欢迎报考南京大学!** (我喜欢用这种)</span><br><span class="line">__欢迎报考南京大学!__</span><br></pre></td></tr></table></figure>

<p><strong>hello</strong> </p>
<h1 id="斜体-用-“-”-或-“-”-包围"><a href="#斜体-用-“-”-或-“-”-包围" class="headerlink" title="斜体 [用 “*” 或 “_” 包围]"></a>斜体 [用 “*” 或 “_” 包围]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*欢迎大佬来浇浇我各种知识* (我喜欢用这种)</span><br><span class="line">_欢迎大佬来浇浇我各种知识_</span><br></pre></td></tr></table></figure>

<p><em>hello</em></p>
<h1 id="斜体并强调"><a href="#斜体并强调" class="headerlink" title="斜体并强调"></a>斜体并强调</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">***hello***</span><br></pre></td></tr></table></figure>

<p><em><strong>hello</strong></em></p>
<h1 id="高亮-用”-”包围"><a href="#高亮-用”-”包围" class="headerlink" title="高亮[用”&#x3D;&#x3D;”包围]"></a>高亮[用”&#x3D;&#x3D;”包围]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==hello==</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;hello&#x3D;&#x3D;</p>
<h1 id="删除线-用-“-”-包围"><a href="#删除线-用-“-”-包围" class="headerlink" title="删除线 [用 “~~” 包围]"></a>删除线 [用 “~~” 包围]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~~hello~~</span><br></pre></td></tr></table></figure>

<p><del>hello</del></p>
<h1 id="代码-用-“-”-包围"><a href="#代码-用-“-”-包围" class="headerlink" title="代码[用 “&#96;” 包围]"></a>代码[用 “&#96;” 包围]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`cd ..`</span><br></pre></td></tr></table></figure>

<p><code>cd ..</code></p>
<h1 id="代码块-用”-”-并敲回车"><a href="#代码块-用”-”-并敲回车" class="headerlink" title="代码块 [用”&#96;&#96;&#96;” 并敲回车]"></a>代码块 [用”&#96;&#96;&#96;” 并敲回车]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">​```hello</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mian</span><span class="params">()</span> &#123;</span><br><span class="line">    print（“Hello, world!\n<span class="string">&quot;）;</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="引用-“-”-空格-前置"><a href="#引用-“-”-空格-前置" class="headerlink" title="*引用 [“&gt;” + 空格 前置]"></a>*引用 [“&gt;” + 空格 前置]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; hello</span><br><span class="line">&gt;</span><br><span class="line">&gt;&gt;hi</span><br></pre></td></tr></table></figure>

<blockquote>
<p>hello</p>
<blockquote>
<p>hi</p>
</blockquote>
</blockquote>
<h1 id="无序列标-“-“或”-”-空格-前置"><a href="#无序列标-“-“或”-”-空格-前置" class="headerlink" title="*无序列标 [“-“或”+” + 空格 前置]"></a>*无序列标 [“-“或”+” + 空格 前置]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- hello</span><br><span class="line">+ hello</span><br></pre></td></tr></table></figure>

<ul>
<li>hello</li>
</ul>
<ul>
<li>hello</li>
</ul>
<h1 id="上标-用-“-”-包围"><a href="#上标-用-“-”-包围" class="headerlink" title="*上标 [用 “^” 包围]"></a>*上标 [用 “^” 包围]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2^3^</span><br></pre></td></tr></table></figure>

<p>2^3^</p>
<h1 id="下标-用-“-”-包围"><a href="#下标-用-“-”-包围" class="headerlink" title="*下标 [用 “~” 包围]"></a>*下标 [用 “~” 包围]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">H~2~O</span><br></pre></td></tr></table></figure>

<p>H<del>2</del>O</p>
<h1 id="注释-“-”-后置"><a href="#注释-“-”-后置" class="headerlink" title="*注释 [“[^]” 后置]"></a>*注释 [“[^]” 后置]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 今日我们相聚于此, 是为了学习 Markdown 的使用, 它的教程对于全体「观众」而言, 值得足足两个硬币的支持鼓励![^1]</span><br><span class="line"></span><br><span class="line">[^1]: 沃兹·基·硕德 改编自「公鸡」普契涅拉.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>hello world<img src="/2024/05/03/MarkDown%E6%A0%BC%E5%BC%8F/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C!" alt="^1"></p>
</blockquote>
<h1 id="链接-常用-“-”-“-”-分别包围文本与链接"><a href="#链接-常用-“-”-“-”-分别包围文本与链接" class="headerlink" title="链接 [常用 “[ ]” + “( )” 分别包围文本与链接]"></a>链接 [常用 “[ ]” + “( )” 分别包围文本与链接]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[hello world](https://hello world.com)</span><br></pre></td></tr></table></figure>

<p>[hello world](<a href="https://hello/">https://hello</a> world.com)</p>
<h1 id="任务列表-“-”-空格-前置"><a href="#任务列表-“-”-空格-前置" class="headerlink" title="任务列表 [“- [ ]” + 空格 前置]"></a>任务列表 [“- [ ]” + 空格 前置]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Todo List:</span><br><span class="line">- [ ]刷B站</span><br><span class="line">- [ ]写代码</span><br><span class="line">- [x]起床</span><br></pre></td></tr></table></figure>



<p>Todo List:</p>
<ul>
<li><p><input disabled type="checkbox"> 
刷B站</p>
</li>
<li><p><input disabled type="checkbox"> 
写代码</p>
</li>
<li><p><input checked disabled type="checkbox"> 
起床</p>
</li>
</ul>
<h1 id="表格-用-“-”-绘制表格边框"><a href="#表格-用-“-”-绘制表格边框" class="headerlink" title="表格 [用 “|” 绘制表格边框]"></a>表格 [用 “|” 绘制表格边框]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一行为表头, 并由第二行分割线决定对齐方式与长度, 第三行及之后即表格数据</span><br><span class="line">| 学号    | 姓名 | 年龄 |</span><br><span class="line">| :------ | :--: | ---: |</span><br><span class="line">| 114514  | 田所 |   24 |</span><br><span class="line">| 1919810 | 浩三 |   25 |</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th align="left">学号</th>
<th align="center">姓名</th>
<th align="right">年龄</th>
</tr>
</thead>
<tbody><tr>
<td align="left">114514</td>
<td align="center">田所</td>
<td align="right">24</td>
</tr>
<tr>
<td align="left">1919810</td>
<td align="center">浩三</td>
<td align="right">25</td>
</tr>
</tbody></table>
<h1 id="图片-直接拖进来-复制粘贴"><a href="#图片-直接拖进来-复制粘贴" class="headerlink" title="图片 [直接拖进来&#x2F;复制粘贴]"></a>图片 [直接拖进来&#x2F;复制粘贴]</h1><p><img src="/2024/05/03/MarkDown%E6%A0%BC%E5%BC%8F/%E9%98%BF%E5%B0%94%E6%B3%B0%E4%BA%9A.png" alt="阿尔泰亚"></p>
<h1 id="分割线-按三个-“-”-或-“-“-或-“-”-并敲回车"><a href="#分割线-按三个-“-”-或-“-“-或-“-”-并敲回车" class="headerlink" title="分割线 [按三个 “*” 或 “-“ 或 “_” 并敲回车]"></a>分割线 [按三个 “*” 或 “-“ 或 “_” 并敲回车]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">***/---/___</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<hr>
<h1 id="Emoji表情-“-”-前置-后置的”-”一般不需要手动输"><a href="#Emoji表情-“-”-前置-后置的”-”一般不需要手动输" class="headerlink" title="Emoji表情 [“:” 前置,后置的”:”一般不需要手动输]"></a>Emoji表情 [“:” 前置,后置的”:”一般不需要手动输]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:sweat_smile:</span><br></pre></td></tr></table></figure>



<p>:sweat_smile:</p>
<p><a href="https://emojipedia.org/apple/">全Emoji的网站</a></p>
<h1 id="公式-用”-”包围"><a href="#公式-用”-”包围" class="headerlink" title="公式[用”$”包围]"></a>公式[用”$”包围]</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a^n+b^n=c^n$</span><br></pre></td></tr></table></figure>

<p>$a^n+b^n&#x3D;c^n$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">%\usepackage&#123;unicode-math&#125;</span><br><span class="line">\displaystyle \ointctrclockwise\mathcal&#123;D&#125;[x(t)]</span><br><span class="line">\sqrt&#123;\frac&#123;\displaystyle3\uppi^2-\sum_&#123;q=0&#125;^&#123;\infty&#125;(z+\hat L)^&#123;q&#125;</span><br><span class="line">\exp(\symrm&#123;i&#125;q^2 \hbar x)&#125;&#123;\displaystyle (\symsfup&#123;Tr&#125;\symbfcal&#123;A&#125;)</span><br><span class="line">\left(\symbf\Lambda_&#123;j_1j_2&#125;^&#123;i_1i_2&#125;\Gamma_&#123;i_1i_2&#125;^&#123;j_1j_2&#125;</span><br><span class="line">\hookrightarrow\vec D\cdot \symbf P \right)&#125;&#125;</span><br><span class="line">=\underbrace&#123;\widetilde&#123;\left\langle \frac&#123;\notin \emptyset&#125;</span><br><span class="line">&#123;\varpi\alpha_&#123;k\uparrow&#125;&#125;\middle\vert</span><br><span class="line">\frac&#123;\partial_\mu T_&#123;\mu\nu&#125;&#125;&#123;2&#125;\right\rangle&#125;&#125;_&#123;\mathrm&#123;K&#125;_3</span><br><span class="line">\mathrm&#123;Fe&#125;(\mathrm&#123;CN&#125;)_6&#125; ,\forall z \in \mathbb&#123;R&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>%\usepackage{unicode-math}<br>\displaystyle \ointctrclockwise\mathcal{D}[x(t)]<br>\sqrt{\frac{\displaystyle3\uppi^2-\sum_{q&#x3D;0}^{\infty}(z+\hat L)^{q}<br>\exp(\symrm{i}q^2 \hbar x)}{\displaystyle (\symsfup{Tr}\symbfcal{A})<br>\left(\symbf\Lambda_{j_1j_2}^{i_1i_2}\Gamma_{i_1i_2}^{j_1j_2}<br>\hookrightarrow\vec D\cdot \symbf P \right)}}<br>&#x3D;\underbrace{\widetilde{\left\langle \frac{\notin \emptyset}<br>{\varpi\alpha_{k\uparrow}}\middle\vert<br>\frac{\partial_\mu T_{\mu\nu}}{2}\right\rangle}}_{\mathrm{K}_3<br>\mathrm{Fe}(\mathrm{CN})_6} ,\forall z \in \mathbb{R}<br>$$</p>
]]></content>
      <categories>
        <category>编码格式</category>
      </categories>
      <tags>
        <tag>md格式</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的搭建和使用</title>
    <url>/2024/05/04/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1. 安装node.js"></a>1. 安装node.js</h1><p><a href="https://nodejs.org/en">Node.js官网</a></p>
<p>打开终端输入<strong>node -v</strong>，如果输出版本号则说明安装成功。</p>
<h1 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2. 安装git"></a>2. 安装git</h1><p><a href="https://git-scm.com/downloads">git官网</a></p>
<p>打开终端输入 <strong>git –version</strong> ,出现版本号则说明安装成功。</p>
<img src="/2024/05/04/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240504150418992.png" alt="image-20240504150418992" style="zoom:67%;">



<h1 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h1><p>在终端输入<strong>nmp install hexo-cli -g</strong>安装hexo。</p>
<p>安装完成后，输入 <strong>hexo –version</strong> 出现正常提示则说明安装成功。</p>
<img src="/2024/05/04/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240504150741461.png" alt="image-20240504150741461" style="zoom:67%;">



<h2 id="3-1-初始化博客空间"><a href="#3-1-初始化博客空间" class="headerlink" title="3.1 初始化博客空间"></a>3.1 初始化博客空间</h2><ol>
<li><p>接着输入 <strong>hexo init 你的博客名字（下文称为blog）</strong> 初始化博客</p>
</li>
<li><p>在bash命令框输入 <strong>cd 你的博客名字</strong> 按enter进入刚初始化的博客空间</p>
</li>
<li><p>输入 <strong>hexo g</strong> 命令编译博客空间</p>
</li>
<li><p>输入 <strong>hexo s</strong> 命令启动hexo服务功能，执行完后打开上图显示的 <a href="http://localhost:4000/">http://localhost:4000/</a> ，就可以看到我们的hexo博客已经在本地部署成功了。</p>
</li>
</ol>
<img src="/2024/05/04/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240504151441949.png" alt="image-20240504151441949" style="zoom:50%;">

<ol start="5">
<li><p>安装butterfly，在终端输入 <strong>npm i hexo-theme-butterfly</strong> <a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly-github</a>，接着打开butterfly主题文件夹（\blog\node_modules\hexo-theme-butterfly），把_config.yml文件复制到我们项目的根目录下（\blog），并重新命名成 _config.butterfly.yml</p>
</li>
<li><p>配置butterfly主题，接着打开项目的配置文件，拉到最下面找到这个配置，并把它改成butterfly，landscape此时就可以删除了。</p>
<p><img src="/2024/05/04/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240504152951514.png" alt="image-20240504152951514"></p>
</li>
<li><p>此时我们再去在bash命令窗口执行 <strong>hexo g 和 hexo s</strong> 命令，此时butterfly主题设置成功。</p>
</li>
</ol>
<img src="/2024/05/04/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240504153221117.png" alt="image-20240504153221117" style="zoom:50%;">



<h2 id="3-2-配置butterfly"><a href="#3-2-配置butterfly" class="headerlink" title="3.2 配置butterfly"></a>3.2 配置butterfly</h2><h3 id="3-2-1主页配置"><a href="#3-2-1主页配置" class="headerlink" title="3.2.1主页配置"></a>3.2.1主页配置</h3><p>参考下面的博客，非常详细。</p>
<p><a href="https://blog.csdn.net/liudonglovehemin/article/details/131094362">配置butterfly主题搭建博客网站主体UI框架_hexo butterfly-CSDN博客</a></p>
<h3 id="3-2-2设置头像，logo，主页背景"><a href="#3-2-2设置头像，logo，主页背景" class="headerlink" title="3.2.2设置头像，logo，主页背景"></a>3.2.2设置头像，logo，主页背景</h3><ol>
<li><p>创建 <strong>\log\source\img</strong> 文件夹</p>
<p>用于存放blog需要的图片</p>
<img src="/2024/05/04/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240504160245336.png" alt="image-20240504160245336" style="zoom: 67%;">
</li>
<li><p>修改 _config.butterfly.yml文件</p>
</li>
</ol>
<img src="/2024/05/04/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240504155724087.png" alt="image-20240504155724087" style="zoom:50%;">

<ol start="3">
<li>输入 <code>hexo g</code>编译，产生html和其他配置文件位置为：<strong>\blog\public</strong></li>
</ol>
<h3 id="3-2-3-tags，category，achieve等特殊界面"><a href="#3-2-3-tags，category，achieve等特殊界面" class="headerlink" title="3.2.3 tags，category，achieve等特殊界面"></a>3.2.3 tags，category，achieve等特殊界面</h3><ol>
<li><p>tags</p>
<p>前往博客的根目录，执行<code>hexo new page tags</code></p>
<p>你會找到 <strong>source&#x2F;tags&#x2F;index.md</strong> 這個文件，修改如下</p>
<p><img src="/2024/05/04/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240504154730446.png" alt="image-20240504154730446"></p>
<p>尤其要加上 <strong>type: “tags”</strong> ，然后终端输入 <strong>hexo g</strong> 编译生成各个配置文件，其中top_img为tags主页的背景图。</p>
</li>
<li><p>category配置类似tags</p>
<p>前往博客的根目录，执行<code>hexo new page categories</code></p>
<p>你會找到 <strong>source&#x2F;categories&#x2F;index.md</strong> 這個文件，修改如下</p>
<p><img src="/2024/05/04/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240504155301873.png" alt="image-20240504155301873"></p>
<p>尤其要加上 <strong>type: “categories”</strong> ，然后终端输入 <strong>hexo g</strong> 编译生成各个配置文件，其中top_img为tags主页的背景图。</p>
</li>
<li><p>achieve</p>
<p>直接在 _config.butterfly.yml文件中配置即可，不必另行配置。</p>
</li>
</ol>
<h1 id="4-解决blog内部用图在typora和hexo中不能同时显示的问题"><a href="#4-解决blog内部用图在typora和hexo中不能同时显示的问题" class="headerlink" title="4. 解决blog内部用图在typora和hexo中不能同时显示的问题"></a>4. 解决blog内部用图在typora和hexo中不能同时显示的问题</h1><h2 id="4-1在hexo中显示"><a href="#4-1在hexo中显示" class="headerlink" title="4.1在hexo中显示"></a>4.1在hexo中显示</h2><p><a href="https://hexo.io/zh-cn/docs/asset-folders">hexo官方解决文档</a></p>
<ol>
<li><p>简单方法：建立<code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p>
</li>
<li><p>复杂方法：（但是管理资源非常方便，推荐）将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>

<p>当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动在同位置创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p>
<img src="/2024/05/04/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240504161953367.png" alt="image-20240504161953367" style="zoom: 67%;">

<p>安装hexo-asset-image，在终端输入 <strong>npm install <a href="https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a></strong>，如果安装不上就开启 fastgithub 或者其他加速器即可。</p>
</li>
</ol>
<h2 id="4-2-在typora中显示图片"><a href="#4-2-在typora中显示图片" class="headerlink" title="4.2 在typora中显示图片"></a>4.2 在typora中显示图片</h2><p>在typora中通过重设图片存储位置[文件-&gt;偏好设置-&gt;图像]如下图，</p>
<img src="/2024/05/04/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240504162435824.png" alt="image-20240504162435824" style="zoom: 33%;">

<p>并将图片路径设置为 <strong>.&#x2F;title&#x2F;图片.png</strong> 可以实现图片显示</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![<span class="string">image</span>](<span class="link">./title/image.png</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">image-20240504162435824</span>](<span class="link">./hexo的搭建和使用/image-20240504162435824.png</span>)</span><br></pre></td></tr></table></figure>



<h1 id="5-blog文章封面、标签、类别设置"><a href="#5-blog文章封面、标签、类别设置" class="headerlink" title="5. blog文章封面、标签、类别设置"></a>5. blog文章封面、标签、类别设置</h1><p>在md文件的第一行输入 <strong>三个”-“+enter</strong> 就是头部。头部添加cover作为文章封面，可以使用相对路径和绝对路径，但是需要注意，引用绝对路径时，不能添加date那一项标签，否则会发生未知错误，多个tag用 <code>&quot;,&quot;</code> 分割。</p>
<p><img src="/2024/05/04/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240504164231099.png" alt="image-20240504164231099"></p>
<p>对于每次使用 hexo new生成md文档模板改动，打开scaffolds文件夹里面的post.md文件，进行自定义更改即可。</p>
]]></content>
      <categories>
        <category>搭建系统</category>
      </categories>
      <tags>
        <tag>md格式</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>临时存放</title>
    <url>/2024/05/31/%E4%B8%B4%E6%97%B6%E5%AD%98%E6%94%BE/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>临存</category>
      </categories>
      <tags>
        <tag>临存</tag>
      </tags>
  </entry>
  <entry>
    <title>5 ros常用组件</title>
    <url>/2024/05/30/5-ros%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>&emsp;在ROS中内置一些比较实用的工具，通过这些工具可以方便快捷的实现某个功能或调试程序，从而提高开发效率，本章主要介绍ROS中内置的如下组件:</p>
<ul>
<li>TF坐标变换，实现不同类型的坐标系之间的转换</li>
<li>rosbag 用于录制ROS节点的执行过程并可以重放该过程</li>
<li>rqt 工具箱，集成了多款图形化的调试工具</li>
</ul>
<h1 id="5-1-TF坐标变换"><a href="#5-1-TF坐标变换" class="headerlink" title="5.1 TF坐标变换"></a>5.1 TF坐标变换</h1><p>&emsp;机器人系统上，有多个传感器，如激光雷达、摄像头等，有的传感器是可以感知机器人周边的物体方位(或者称之为:坐标，横向、纵向、高度的距离信息)的，以协助机器人定位障碍物，但这是相对于传感器的方位信息，若要使用，需要一个转换过程，使其变为相对于机器人或相关组件的方位信息。</p>
<p><strong>作用</strong>：在 ROS 中用于实现不同坐标系之间的点或向量的转换。</p>
<p><strong>说明</strong>：在ROS中坐标变换最初对应的是tf，不过在 hydro 版本开始, tf 被弃用，迁移到 tf2,后者更为简洁高效，</p>
<p><strong>tf2对应的常用功能包有</strong>：</p>
<p>tf2_geometry_msgs : 可以将ROS消息转换成tf2消息。</p>
<p>tf2 : 封装了坐标变换的常用消息。</p>
<p>tf2_ros : 为tf2提供了roscpp和rospy绑定，封装了坐标变换常用的API。</p>
<hr>
<h2 id="5-1-1-坐标msg消息"><a href="#5-1-1-坐标msg消息" class="headerlink" title="5.1.1 坐标msg消息"></a>5.1.1 坐标msg消息</h2><p>订阅发布模型中数据载体 msg 是一个重要实现，首先需要了解一下，在坐标转换实现中常用的 msg : <strong>geometry_msgs&#x2F;TransformStamped</strong> 和 <strong>geometry_msgs&#x2F;PointStamped</strong></p>
<p>前者用于传输坐标系相关位置信息，后者用于传输某个坐标系内坐标点的信息。在坐标变换中，频繁的需要使用到坐标系的相对关系以及坐标点信息。</p>
<p><strong>1. geometry_msgs&#x2F;TransformStamped</strong></p>
<p>命令行键入:<code>rosmsg info geometry_msgs/TransformStamped</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">std_msgs/Header header                     <span class="comment">#头信息</span></span><br><span class="line">  uint32 seq                                <span class="comment">#|-- 序列号</span></span><br><span class="line">  time stamp                                <span class="comment">#|-- 时间戳</span></span><br><span class="line">  string frame_id                            <span class="comment">#|-- 坐标 ID</span></span><br><span class="line">string child_frame_id                    <span class="comment">#子坐标系的 id</span></span><br><span class="line">geometry_msgs/Transform transform        <span class="comment">#坐标信息</span></span><br><span class="line">  geometry_msgs/Vector3 translation        <span class="comment">#偏移量</span></span><br><span class="line">    float64 x                                <span class="comment">#|-- X 方向的偏移量</span></span><br><span class="line">    float64 y                                <span class="comment">#|-- Y 方向的偏移量</span></span><br><span class="line">    float64 z                                <span class="comment">#|-- Z 方向上的偏移量</span></span><br><span class="line">  geometry_msgs/Quaternion rotation        <span class="comment">#四元数，右手法则</span></span><br><span class="line">    float64 x                                <span class="comment">#|-- 水平面的偏移方向，绕Z轴转</span></span><br><span class="line">    float64 y                                <span class="comment">#|-- 俯仰面的偏移方向，绕Y轴转</span></span><br><span class="line">    float64 z                                <span class="comment">#|-- 翻滚面的偏移方向，绕X轴转</span></span><br><span class="line">    float64 w</span><br></pre></td></tr></table></figure>

<p>四元数用于表示坐标的相对姿态</p>
<p><strong>2. geometry_msgs&#x2F;PointStamped</strong></p>
<p>命令行键入:<code>rosmsg info geometry_msgs/PointStamped</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">std_msgs/Header header                    <span class="comment">#头</span></span><br><span class="line">  uint32 seq                                <span class="comment">#|-- 序号</span></span><br><span class="line">  time stamp                                <span class="comment">#|-- 时间戳</span></span><br><span class="line">  string frame_id                            <span class="comment">#|-- 所属坐标系的 id</span></span><br><span class="line">geometry_msgs/Point point                <span class="comment">#点坐标</span></span><br><span class="line">  float64 x                                    <span class="comment">#|-- x y z 坐标</span></span><br><span class="line">  float64 y</span><br><span class="line">  float64 z</span><br></pre></td></tr></table></figure>



<h2 id="5-1-2-静态坐标变换"><a href="#5-1-2-静态坐标变换" class="headerlink" title="5.1.2 静态坐标变换"></a>5.1.2 静态坐标变换</h2><p>所谓静态坐标变换，是指两个坐标系之间的相对位置是固定的。</p>
<p><strong>需求描述:</strong></p>
<p>现有一机器人模型，核心构成包含主体与雷达，各对应一坐标系，坐标系的原点分别位于主体与雷达的物理中心，已知雷达原点相对于主体原点位移关系如下: x 0.2 y0.0 z0.5。当前雷达检测到一障碍物，在雷达坐标系中障碍物的坐标为 (2.0 3.0 5.0),请问，该障碍物相对于主体的坐标是多少？</p>
<p>**结果演示:**（命令行键入 rviz）</p>
<p><img src="/2024/05/30/5-ros%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/image-20240606144619843.png" alt="image-20240606144619843"></p>
<p><img src="/2024/05/30/5-ros%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/image-20240606144603696.png" alt="image-20240606144603696"></p>
<p><strong>实现分析:</strong></p>
<ol>
<li>坐标系相对关系，可以通过发布方发布</li>
<li>订阅方，订阅到发布的坐标系相对关系，再传入坐标点信息(可以写死)，然后借助于 tf 实现坐标变换，并将结果输出</li>
</ol>
<p>**实现流程:**C++ 与 Python 实现流程一致</p>
<ol>
<li>新建功能包，添加依赖</li>
<li>编写发布方实现</li>
<li>编写订阅方实现</li>
<li>执行并查看结果</li>
</ol>
<hr>
<h3 id="1-创建功能包"><a href="#1-创建功能包" class="headerlink" title="1.创建功能包"></a>1.创建功能包</h3><p>创建项目功能包依赖于 <code>tf2 tf2_ros tf2_geometry_msgs roscpp rospy std_msgs geometry_msgs</code></p>
<h3 id="2-发布方"><a href="#2-发布方" class="headerlink" title="2.发布方"></a>2.发布方</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    静态坐标变换发布方:</span></span><br><span class="line"><span class="comment">        发布关于 laser 坐标系的位置信息 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现流程:</span></span><br><span class="line"><span class="comment">        1.包含头文件</span></span><br><span class="line"><span class="comment">        2.初始化 ROS 节点</span></span><br><span class="line"><span class="comment">        3.创建静态坐标转换广播器</span></span><br><span class="line"><span class="comment">        4.创建坐标系信息</span></span><br><span class="line"><span class="comment">        5.广播器发布坐标系信息</span></span><br><span class="line"><span class="comment">        6.spin()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.包含头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2_ros/static_transform_broadcaster.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;geometry_msgs/TransformStamped.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2/LinearMath/Quaternion.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.初始化 ROS 节点</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;static_brocast&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.创建静态坐标转换广播器</span></span><br><span class="line">    tf2_ros::StaticTransformBroadcaster broadcaster;</span><br><span class="line">    <span class="comment">// 4.创建坐标系信息</span></span><br><span class="line">    geometry_msgs::TransformStamped ts;</span><br><span class="line">    <span class="comment">//----设置头信息</span></span><br><span class="line">    ts.header.seq = <span class="number">100</span>;</span><br><span class="line">    ts.header.stamp = ros::Time::<span class="built_in">now</span>(); <span class="comment">// </span></span><br><span class="line">    ts.header.frame_id = <span class="string">&quot;base_link&quot;</span>; <span class="comment">// 相对关系中被参考的那个点，即原点或者说起点 </span></span><br><span class="line">    <span class="comment">//----设置子级坐标系</span></span><br><span class="line">    ts.child_frame_id = <span class="string">&quot;laser&quot;</span>;</span><br><span class="line">    <span class="comment">//----设置子级相对于父级的偏移量</span></span><br><span class="line">    ts.transform.translation.x = <span class="number">0.2</span>;</span><br><span class="line">    ts.transform.translation.y = <span class="number">0.0</span>;</span><br><span class="line">    ts.transform.translation.z = <span class="number">0.5</span>;</span><br><span class="line">    <span class="comment">//----设置四元数:将 欧拉角数据转换成四元数</span></span><br><span class="line">    tf2::Quaternion qtn;</span><br><span class="line">    qtn.<span class="built_in">setRPY</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    ts.transform.rotation.x = qtn.<span class="built_in">getX</span>();</span><br><span class="line">    ts.transform.rotation.y = qtn.<span class="built_in">getY</span>();</span><br><span class="line">    ts.transform.rotation.z = qtn.<span class="built_in">getZ</span>();</span><br><span class="line">    ts.transform.rotation.w = qtn.<span class="built_in">getW</span>();</span><br><span class="line">    <span class="comment">// 5.广播器发布坐标系信息</span></span><br><span class="line">    broadcaster.<span class="built_in">sendTransform</span>(ts);</span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件此处略。</p>
<h3 id="3-订阅方"><a href="#3-订阅方" class="headerlink" title="3.订阅方"></a>3.订阅方</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    订阅坐标系信息，生成一个相对于 子级坐标系的坐标点数据，转换成父级坐标系中的坐标点</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现流程:</span></span><br><span class="line"><span class="comment">        1.包含头文件</span></span><br><span class="line"><span class="comment">        2.初始化 ROS 节点</span></span><br><span class="line"><span class="comment">        3.创建 TF 订阅节点</span></span><br><span class="line"><span class="comment">        4.生成一个坐标点(相对于子级坐标系)</span></span><br><span class="line"><span class="comment">        5.转换坐标点(相对于父级坐标系)</span></span><br><span class="line"><span class="comment">        6.spin()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//1.包含头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2_ros/transform_listener.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2_ros/buffer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;geometry_msgs/PointStamped.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2_geometry_msgs/tf2_geometry_msgs.h&quot;</span> <span class="comment">//注意: 调用 transform 必须包含该头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.初始化 ROS 节点</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;tf_sub&quot;</span>);</span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line">    <span class="comment">// 3.创建 TF 订阅节点</span></span><br><span class="line">    tf2_ros::Buffer buffer;</span><br><span class="line">    <span class="function">tf2_ros::TransformListener <span class="title">listener</span><span class="params">(buffer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ros::Rate <span class="title">r</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">// 4.生成一个坐标点(相对于子级坐标系)，即模拟雷达检测到的目标与雷达的距离</span></span><br><span class="line">        geometry_msgs::PointStamped point_laser;</span><br><span class="line">        point_laser.header.frame_id = <span class="string">&quot;laser&quot;</span>;</span><br><span class="line">        point_laser.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">        point_laser.point.x = <span class="number">1</span>;</span><br><span class="line">        point_laser.point.y = <span class="number">2</span>;</span><br><span class="line">        point_laser.point.z = <span class="number">7.3</span>;</span><br><span class="line">    <span class="comment">// 5.转换坐标点(相对于父级坐标系)</span></span><br><span class="line">        <span class="comment">//--------------使用 try 语句或休眠，否则可能由于缓存接收延迟而导致坐标转换失败------------------------</span></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;	<span class="comment">//新建一个坐标点，用于接收转换结果  </span></span><br><span class="line">            geometry_msgs::PointStamped point_base;</span><br><span class="line">            <span class="comment">/* 运行时存在的问题：抛出一个异常 base_link 不存在</span></span><br><span class="line"><span class="comment">            				原因：订阅数据是一个耗时的操作，可能再调用 transform 转换函数时，坐标系的相对关系还没有订阅到，因此出现异常。</span></span><br><span class="line"><span class="comment">            				解决：</span></span><br><span class="line"><span class="comment">            					方案1：在调用转换函数前，执行休眠</span></span><br><span class="line"><span class="comment">                                方案2：进行异常处理</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            point_base = buffer.<span class="built_in">transform</span>(point_laser,<span class="string">&quot;base_link&quot;</span>);</span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;转换后的数据:(%.2f,%.2f,%.2f),参考的坐标系是:%s&quot;</span>,point_base.point.x,point_base.point.y,point_base.point.z,point_base.header.frame_id.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">catch</span>(<span class="type">const</span> std::exception&amp; e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// std::cerr &lt;&lt; e.what() &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;程序异常.....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        r.<span class="built_in">sleep</span>();  </span><br><span class="line">        ros::<span class="built_in">spinOnce</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-1-3-动态坐标变换"><a href="#5-1-3-动态坐标变换" class="headerlink" title="5.1.3 动态坐标变换"></a>5.1.3 动态坐标变换</h2><p>所谓动态坐标变换，是指两个坐标系之间的相对位置是变化的。</p>
<p><strong>需求描述:</strong></p>
<p>启动 turtlesim_node,该节点中窗体有一个世界坐标系(左下角为坐标系原点)，乌龟是另一个坐标系，键盘控制乌龟运动，将两个坐标系的相对位置动态发布。</p>
<p><strong>结果演示:</strong></p>
<p><img src="/2024/05/30/5-ros%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2_%E5%8A%A8%E6%80%81.gif" alt="img"></p>
<p><strong>实现分析:</strong></p>
<ol>
<li>乌龟本身不但可以看作坐标系，也是世界坐标系中的一个坐标点</li>
<li>订阅 turtle1&#x2F;pose,可以获取乌龟在世界坐标系的 x坐标、y坐标、偏移量以及线速度和角速度</li>
<li>将 pose 信息转换成 坐标系相对信息并发布</li>
</ol>
<p><strong>实现流程:</strong></p>
<ol>
<li>新建功能包，添加依赖</li>
<li>创建坐标相对关系发布方(同时需要订阅乌龟位姿信息)</li>
<li>创建坐标相对关系订阅方</li>
<li>执行</li>
</ol>
<hr>
<p>方案A:C++实现</p>
<h3 id="1-创建功能包-1"><a href="#1-创建功能包-1" class="headerlink" title="1.创建功能包"></a>1.创建功能包</h3><p>创建项目功能包依赖于 tf2、tf2_ros、tf2_geometry_msgs、roscpp rospy std_msgs geometry_msgs、turtlesim</p>
<h3 id="2-发布方-1"><a href="#2-发布方-1" class="headerlink" title="2.发布方"></a>2.发布方</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    动态的坐标系相对姿态发布(一个坐标系相对于另一个坐标系的相对姿态是不断变动的)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    需求: 启动 turtlesim_node,该节点中窗体有一个世界坐标系(左下角为坐标系原点)，乌龟是另一个坐标系，键盘</span></span><br><span class="line"><span class="comment">    控制乌龟运动，将两个坐标系的相对位置动态发布</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现分析:</span></span><br><span class="line"><span class="comment">        1.乌龟本身不但可以看作坐标系，也是世界坐标系中的一个坐标点</span></span><br><span class="line"><span class="comment">        2.订阅 turtle1/pose,可以获取乌龟在世界坐标系的 x坐标、y坐标、偏移量以及线速度和角速度</span></span><br><span class="line"><span class="comment">        3.将 pose 信息转换成 坐标系相对信息并发布</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现流程:</span></span><br><span class="line"><span class="comment">        1.包含头文件</span></span><br><span class="line"><span class="comment">        2.初始化 ROS 节点</span></span><br><span class="line"><span class="comment">        3.创建 ROS 句柄</span></span><br><span class="line"><span class="comment">        4.创建订阅对象</span></span><br><span class="line"><span class="comment">        5.回调函数处理订阅到的数据(实现TF广播)</span></span><br><span class="line"><span class="comment">            5-1.创建 TF 广播器</span></span><br><span class="line"><span class="comment">            5-2.创建 广播的数据(通过 pose 设置)</span></span><br><span class="line"><span class="comment">            5-3.广播器发布数据</span></span><br><span class="line"><span class="comment">        6.spin</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 1.包含头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;turtlesim/Pose.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2_ros/transform_broadcaster.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;geometry_msgs/TransformStamped.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2/LinearMath/Quaternion.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doPose</span><span class="params">(<span class="type">const</span> turtlesim::Pose::ConstPtr&amp; pose)</span></span>&#123;</span><br><span class="line">    <span class="comment">//  5-1.创建 TF 广播器</span></span><br><span class="line">    <span class="type">static</span> tf2_ros::TransformBroadcaster broadcaster;</span><br><span class="line">    <span class="comment">//  5-2.创建 广播的数据(通过 pose 设置)</span></span><br><span class="line">    geometry_msgs::TransformStamped tfs;</span><br><span class="line">    <span class="comment">//  |----头设置</span></span><br><span class="line">    tfs.header.frame_id = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">    tfs.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  |----坐标系 ID</span></span><br><span class="line">    tfs.child_frame_id = <span class="string">&quot;turtle1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  |----坐标系相对信息设置</span></span><br><span class="line">    tfs.transform.translation.x = pose-&gt;x;</span><br><span class="line">    tfs.transform.translation.y = pose-&gt;y;</span><br><span class="line">    tfs.transform.translation.z = <span class="number">0.0</span>; <span class="comment">// 二维实现，pose 中没有z，z 是 0</span></span><br><span class="line">    <span class="comment">//  |--------- 四元数设置</span></span><br><span class="line">    tf2::Quaternion qtn;</span><br><span class="line">    qtn.<span class="built_in">setRPY</span>(<span class="number">0</span>,<span class="number">0</span>,pose-&gt;theta);</span><br><span class="line">    tfs.transform.rotation.x = qtn.<span class="built_in">getX</span>();</span><br><span class="line">    tfs.transform.rotation.y = qtn.<span class="built_in">getY</span>();</span><br><span class="line">    tfs.transform.rotation.z = qtn.<span class="built_in">getZ</span>();</span><br><span class="line">    tfs.transform.rotation.w = qtn.<span class="built_in">getW</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  5-3.广播器发布数据</span></span><br><span class="line">    broadcaster.<span class="built_in">sendTransform</span>(tfs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.初始化 ROS 节点</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;dynamic_tf_pub&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.创建 ROS 句柄</span></span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line">    <span class="comment">// 4.创建订阅对象</span></span><br><span class="line">    ros::Subscriber sub = nh.<span class="built_in">subscribe</span>&lt;turtlesim::Pose&gt;(<span class="string">&quot;/turtle1/pose&quot;</span>,<span class="number">1000</span>,doPose);</span><br><span class="line">    <span class="comment">//     5.回调函数处理订阅到的数据(实现TF广播)</span></span><br><span class="line">    <span class="comment">//        </span></span><br><span class="line">    <span class="comment">// 6.spin</span></span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure>

<p>配置文件此处略。</p>
<h3 id="3-订阅方-1"><a href="#3-订阅方-1" class="headerlink" title="3.订阅方"></a>3.订阅方</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.包含头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2_ros/transform_listener.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2_ros/buffer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;geometry_msgs/PointStamped.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2_geometry_msgs/tf2_geometry_msgs.h&quot;</span> <span class="comment">//注意: 调用 transform 必须包含该头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.初始化 ROS 节点</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;dynamic_tf_sub&quot;</span>);</span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line">    <span class="comment">// 3.创建 TF 订阅节点</span></span><br><span class="line">    tf2_ros::Buffer buffer;</span><br><span class="line">    <span class="function">tf2_ros::TransformListener <span class="title">listener</span><span class="params">(buffer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ros::Rate <span class="title">r</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">// 4.生成一个坐标点(相对于子级坐标系)</span></span><br><span class="line">        geometry_msgs::PointStamped point_laser;</span><br><span class="line">        point_laser.header.frame_id = <span class="string">&quot;turtle1&quot;</span>;</span><br><span class="line">        point_laser.header.stamp = ros::<span class="built_in">Time</span>(); <span class="comment">// 不设置成 now 是为了防止因时间差较大导致的系统自动判错</span></span><br><span class="line">        point_laser.point.x = <span class="number">1</span>;</span><br><span class="line">        point_laser.point.y = <span class="number">1</span>;</span><br><span class="line">        point_laser.point.z = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 5.转换坐标点(相对于父级坐标系)</span></span><br><span class="line">        <span class="comment">//新建一个坐标点，用于接收转换结果  </span></span><br><span class="line">        <span class="comment">//--------------使用 try 语句或休眠，否则可能由于缓存接收延迟而导致坐标转换失败------------------------</span></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            geometry_msgs::PointStamped point_base;</span><br><span class="line">            point_base = buffer.<span class="built_in">transform</span>(point_laser,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;坐标点相对于 world 的坐标为:(%.2f,%.2f,%.2f)&quot;</span>,point_base.point.x,point_base.point.y,point_base.point.z);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">catch</span>(<span class="type">const</span> std::exception&amp; e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// std::cerr &lt;&lt; e.what() &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;程序异常:%s&quot;</span>,e.<span class="built_in">what</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        r.<span class="built_in">sleep</span>();  </span><br><span class="line">        ros::<span class="built_in">spinOnce</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件此处略。</p>
<h3 id="4-执行"><a href="#4-执行" class="headerlink" title="4.执行"></a>4.执行</h3><p>可以使用命令行或launch文件的方式分别启动发布节点与订阅节点，如果程序无异常，与演示结果类似。</p>
<p>可以使用 rviz 查看坐标系相对关系</p>
<h2 id="5-1-4-多坐标变换"><a href="#5-1-4-多坐标变换" class="headerlink" title="5.1.4 多坐标变换"></a>5.1.4 多坐标变换</h2><p><strong>需求描述:</strong></p>
<p>现有坐标系统，父级坐标系统 world,下有两子级系统 son1，son2，son1 相对于 world，以及 son2 相对于 world 的关系是已知的，求 son1原点在 son2中的坐标，又已知在 son1中一点的坐标，要求求出该点在 son2 中的坐标</p>
<p><strong>实现分析:</strong></p>
<ol>
<li>首先，需要发布 son1 相对于 world，以及 son2 相对于 world 的坐标消息</li>
<li>然后，需要订阅坐标发布消息，并取出订阅的消息，借助于 tf2 实现 son1 和 son2 的转换</li>
<li>最后，还要实现坐标点的转换</li>
</ol>
<p><strong>实现流程:</strong></p>
<ol>
<li>新建功能包，添加依赖</li>
<li>创建坐标相对关系发布方(需要发布两个坐标相对关系)</li>
<li>创建坐标相对关系订阅方</li>
<li>执行</li>
</ol>
<hr>
<h3 id="1-创建功能包-2"><a href="#1-创建功能包-2" class="headerlink" title="1. 创建功能包"></a>1. 创建功能包</h3><p>创建项目功能包依赖于 tf2 tf2_ros tf2_geometry_msgs roscpp rospy std_msgs geometry_msgs turtlesim</p>
<h3 id="2-发布方-2"><a href="#2-发布方-2" class="headerlink" title="2. 发布方"></a>2. 发布方</h3><p>为了方便，使用静态坐标变换发布</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;tf2_ros&quot;</span> <span class="attr">type</span>=<span class="string">&quot;static_transform_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;son1&quot;</span> <span class="attr">args</span>=<span class="string">&quot;0.2 0.8 0.3 0 0 0 /world /son1&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;tf2_ros&quot;</span> <span class="attr">type</span>=<span class="string">&quot;static_transform_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;son2&quot;</span> <span class="attr">args</span>=<span class="string">&quot;0.5 0 0 0 0 0 /world /son2&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-订阅方-2"><a href="#3-订阅方-2" class="headerlink" title="3. 订阅方"></a>3. 订阅方</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">需求:</span></span><br><span class="line"><span class="comment">    现有坐标系统，父级坐标系统 world,下有两子级系统 son1，son2，</span></span><br><span class="line"><span class="comment">    son1 相对于 world，以及 son2 相对于 world 的关系是已知的，</span></span><br><span class="line"><span class="comment">    求 son1 与 son2中的坐标关系，又已知在 son1中一点的坐标，要求求出该点在 son2 中的坐标</span></span><br><span class="line"><span class="comment">实现流程:</span></span><br><span class="line"><span class="comment">    1.包含头文件</span></span><br><span class="line"><span class="comment">    2.初始化 ros 节点</span></span><br><span class="line"><span class="comment">    3.创建 ros 句柄</span></span><br><span class="line"><span class="comment">    4.创建 TF 订阅对象</span></span><br><span class="line"><span class="comment">    5.解析订阅信息中获取 son1 坐标系原点在 son2 中的坐标</span></span><br><span class="line"><span class="comment">      解析 son1 中的点相对于 son2 的坐标</span></span><br><span class="line"><span class="comment">    6.spin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//1.包含头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2_ros/transform_listener.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2/LinearMath/Quaternion.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2_geometry_msgs/tf2_geometry_msgs.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;geometry_msgs/TransformStamped.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;geometry_msgs/PointStamped.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.初始化 ros 节点</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;sub_frames&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.创建 ros 句柄</span></span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line">    <span class="comment">// 4.创建 TF 订阅对象</span></span><br><span class="line">    tf2_ros::Buffer buffer; </span><br><span class="line">    <span class="function">tf2_ros::TransformListener <span class="title">listener</span><span class="params">(buffer)</span></span>;</span><br><span class="line">    <span class="comment">// 5.解析订阅信息中获取 son1 坐标系原点在 son2 中的坐标</span></span><br><span class="line">    <span class="function">ros::Rate <span class="title">r</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//   解析 son1 中的点相对于 son2 的坐标</span></span><br><span class="line">            geometry_msgs::TransformStamped tfs = buffer.<span class="built_in">lookupTransform</span>(<span class="string">&quot;son2&quot;</span>,<span class="string">&quot;son1&quot;</span>,ros::<span class="built_in">Time</span>(<span class="number">0</span>));</span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Son1 相对于 Son2 的坐标关系:父坐标系ID=%s&quot;</span>,tfs.header.frame_id.<span class="built_in">c_str</span>());</span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Son1 相对于 Son2 的坐标关系:子坐标系ID=%s&quot;</span>,tfs.child_frame_id.<span class="built_in">c_str</span>());</span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Son1 相对于 Son2 的坐标关系:x=%.2f,y=%.2f,z=%.2f&quot;</span>,</span><br><span class="line">                    tfs.transform.translation.x,</span><br><span class="line">                    tfs.transform.translation.y,</span><br><span class="line">                    tfs.transform.translation.z</span><br><span class="line">                    );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 坐标点解析</span></span><br><span class="line">            geometry_msgs::PointStamped ps;</span><br><span class="line">            ps.header.frame_id = <span class="string">&quot;son1&quot;</span>;</span><br><span class="line">            ps.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">            ps.point.x = <span class="number">1.0</span>;</span><br><span class="line">            ps.point.y = <span class="number">2.0</span>;</span><br><span class="line">            ps.point.z = <span class="number">3.0</span>;</span><br><span class="line"></span><br><span class="line">            geometry_msgs::PointStamped psAtSon2;</span><br><span class="line">            psAtSon2 = buffer.<span class="built_in">transform</span>(ps,<span class="string">&quot;son2&quot;</span>);</span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;在 Son2 中的坐标:x=%.2f,y=%.2f,z=%.2f&quot;</span>,</span><br><span class="line">                    psAtSon2.point.x,</span><br><span class="line">                    psAtSon2.point.y,</span><br><span class="line">                    psAtSon2.point.z</span><br><span class="line">                    );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">catch</span>(<span class="type">const</span> std::exception&amp; e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// std::cerr &lt;&lt; e.what() &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;异常信息:%s&quot;</span>,e.<span class="built_in">what</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        r.<span class="built_in">sleep</span>();</span><br><span class="line">        <span class="comment">// 6.spin</span></span><br><span class="line">        ros::<span class="built_in">spinOnce</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="5-1-5-TF坐标变换实操"><a href="#5-1-5-TF坐标变换实操" class="headerlink" title="5.1.5 TF坐标变换实操"></a>5.1.5 TF坐标变换实操</h2><p><strong>需求描述:</strong></p>
<p>程序启动之初: 产生两只乌龟，中间的乌龟(A) 和 左下乌龟(B), B 会自动运行至A的位置，并且键盘控制时，只是控制 A 的运动，但是 B 可以跟随 A 运行</p>
<p><strong>结果演示:</strong></p>
<p><img src="/2024/05/30/5-ros%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/TF%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2.gif" alt="img"></p>
<p><strong>实现分析:</strong></p>
<p>乌龟跟随实现的核心，是乌龟A和B都要发布相对世界坐标系的坐标信息，然后，订阅到该信息需要转换获取A相对于B坐标系的信息，最后，再生成速度信息，并控制B运动。</p>
<ol>
<li>启动乌龟显示节点</li>
<li>在乌龟显示窗体中生成一只新的乌龟(需要使用服务)</li>
<li>编写两只乌龟发布坐标信息的节点</li>
<li>编写订阅节点订阅坐标信息并生成新的相对关系生成速度信息</li>
</ol>
<p><strong>实现流程:</strong></p>
<ol>
<li>新建功能包，添加依赖</li>
<li>编写服务客户端，用于生成一只新的乌龟</li>
<li>编写发布方，发布两只乌龟的坐标信息</li>
<li>编写订阅方，订阅两只乌龟信息，生成速度信息并发布</li>
<li>运行</li>
</ol>
<p><strong>准备工作:</strong></p>
<ol>
<li><p>了解如何创建第二只乌龟，且不受键盘控制</p>
<p>创建第二只乌龟需要使用rosservice,话题使用的是 spawn</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosservice call /spawn <span class="string">&quot;x: 1.0 y: 1.0 theta: 1.0 name: &#x27;turtle_flow&#x27;&quot;</span> </span><br><span class="line">name: <span class="string">&quot;turtle_flow&quot;</span></span><br></pre></td></tr></table></figure>

<p>键盘是无法控制第二只乌龟运动的，因为使用的话题: &#x2F;第二只乌龟名称&#x2F;cmd_vel,对应的要控制乌龟运动必须发布对应的话题消息</p>
</li>
<li><p>了解如何获取两只乌龟的坐标</p>
<p>是通过话题 &#x2F;乌龟名称&#x2F;pose 来获取的</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">x: <span class="number">1.0</span> //x坐标</span><br><span class="line">y: <span class="number">1.0</span> //y坐标</span><br><span class="line">theta: <span class="literal">-1</span>.<span class="number">21437060833</span> //角度</span><br><span class="line">linear_velocity: <span class="number">0.0</span> //线速度</span><br><span class="line">angular_velocity: <span class="number">1.0</span> //角速度</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h3 id="1-创建功能包-3"><a href="#1-创建功能包-3" class="headerlink" title="1. 创建功能包"></a>1. 创建功能包</h3><p>创建项目功能包依赖于 tf2 tf2_ros tf2_geometry_msgs roscpp rospy std_msgs geometry_msgs turtlesim</p>
<h3 id="2-服务客户端-生成乌龟"><a href="#2-服务客户端-生成乌龟" class="headerlink" title="2. 服务客户端(生成乌龟)"></a>2. 服务客户端(生成乌龟)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    创建第二只小乌龟</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;turtlesim/Spawn.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行初始化</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;create_turtle&quot;</span>);</span><br><span class="line">    <span class="comment">//创建节点</span></span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line">    <span class="comment">//创建服务客户端</span></span><br><span class="line">    ros::ServiceClient client = nh.<span class="built_in">serviceClient</span>&lt;turtlesim::Spawn&gt;(<span class="string">&quot;/spawn&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ros::service::<span class="built_in">waitForService</span>(<span class="string">&quot;/spawn&quot;</span>);</span><br><span class="line">    turtlesim::Spawn spawn;</span><br><span class="line">    spawn.request.name = <span class="string">&quot;turtle2&quot;</span>;</span><br><span class="line">    spawn.request.x = <span class="number">1.0</span>;</span><br><span class="line">    spawn.request.y = <span class="number">2.0</span>;</span><br><span class="line">    spawn.request.theta = <span class="number">3.12415926</span>;</span><br><span class="line">    <span class="type">bool</span> flag = client.<span class="built_in">call</span>(spawn);</span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;乌龟%s创建成功!&quot;</span>,spawn.response.name.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;乌龟2创建失败!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件此处略。</p>
<h3 id="3-发布方-发布两只乌龟的坐标信息"><a href="#3-发布方-发布两只乌龟的坐标信息" class="headerlink" title="3. 发布方(发布两只乌龟的坐标信息)"></a>3. 发布方(发布两只乌龟的坐标信息)</h3><p>可以订阅乌龟的位姿信息，然后再转换成坐标信息，两只乌龟的实现逻辑相同，只是订阅的话题名称，生成的坐标信息等稍有差异，可以将差异部分通过参数传入:</p>
<ul>
<li>该节点需要启动两次</li>
<li>每次启动时都需要传入乌龟节点名称 (第一次是 turtle1 第二次是 turtle2)</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    该文件实现:需要订阅 turtle1 和 turtle2 的 pose，然后广播相对 world 的坐标系信息</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    注意: 订阅的两只 turtle,除了命名空间(turtle1 和 turtle2)不同外,</span></span><br><span class="line"><span class="comment">          其他的话题名称和实现逻辑都是一样的，</span></span><br><span class="line"><span class="comment">          所以我们可以将所需的命名空间通过 args 动态传入</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现流程:</span></span><br><span class="line"><span class="comment">        1.包含头文件</span></span><br><span class="line"><span class="comment">        2.初始化 ros 节点</span></span><br><span class="line"><span class="comment">        3.解析传入的命名空间</span></span><br><span class="line"><span class="comment">        4.创建 ros 句柄</span></span><br><span class="line"><span class="comment">        5.创建订阅对象</span></span><br><span class="line"><span class="comment">        6.回调函数处理订阅的 pose 信息</span></span><br><span class="line"><span class="comment">            6-1.创建 TF 广播器</span></span><br><span class="line"><span class="comment">            6-2.将 pose 信息转换成 TransFormStamped</span></span><br><span class="line"><span class="comment">            6-3.发布</span></span><br><span class="line"><span class="comment">        7.spin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//1.包含头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;turtlesim/Pose.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2_ros/transform_broadcaster.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2/LinearMath/Quaternion.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;geometry_msgs/TransformStamped.h&quot;</span></span></span><br><span class="line"><span class="comment">//保存乌龟名称</span></span><br><span class="line">std::string turtle_name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doPose</span><span class="params">(<span class="type">const</span> turtlesim::Pose::ConstPtr&amp; pose)</span></span>&#123;</span><br><span class="line">    <span class="comment">//  6-1.创建 TF 广播器 ---------------------------------------- 注意 static</span></span><br><span class="line">    <span class="type">static</span> tf2_ros::TransformBroadcaster broadcaster;</span><br><span class="line">    <span class="comment">//  6-2.将 pose 信息转换成 TransFormStamped</span></span><br><span class="line">    geometry_msgs::TransformStamped tfs;</span><br><span class="line">    tfs.header.frame_id = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">    tfs.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">    tfs.child_frame_id = turtle_name;</span><br><span class="line">    tfs.transform.translation.x = pose-&gt;x;</span><br><span class="line">    tfs.transform.translation.y = pose-&gt;y;</span><br><span class="line">    tfs.transform.translation.z = <span class="number">0.0</span>;</span><br><span class="line">    tf2::Quaternion qtn;</span><br><span class="line">    qtn.<span class="built_in">setRPY</span>(<span class="number">0</span>,<span class="number">0</span>,pose-&gt;theta);</span><br><span class="line">    tfs.transform.rotation.x = qtn.<span class="built_in">getX</span>();</span><br><span class="line">    tfs.transform.rotation.y = qtn.<span class="built_in">getY</span>();</span><br><span class="line">    tfs.transform.rotation.z = qtn.<span class="built_in">getZ</span>();</span><br><span class="line">    tfs.transform.rotation.w = qtn.<span class="built_in">getW</span>();</span><br><span class="line">    <span class="comment">//  6-3.发布</span></span><br><span class="line">    broadcaster.<span class="built_in">sendTransform</span>(tfs);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.初始化 ros 节点</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;pub_tf&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.解析传入的命名空间</span></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;请传入正确的参数&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        turtle_name = argv[<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;乌龟 %s 坐标发送启动&quot;</span>,turtle_name.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.创建 ros 句柄</span></span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line">    <span class="comment">// 5.创建订阅对象</span></span><br><span class="line">    ros::Subscriber sub = nh.<span class="built_in">subscribe</span>&lt;turtlesim::Pose&gt;(turtle_name + <span class="string">&quot;/pose&quot;</span>,<span class="number">1000</span>,doPose);</span><br><span class="line">    <span class="comment">//     6.回调函数处理订阅的 pose 信息</span></span><br><span class="line">    <span class="comment">//         6-1.创建 TF 广播器</span></span><br><span class="line">    <span class="comment">//         6-2.将 pose 信息转换成 TransFormStamped</span></span><br><span class="line">    <span class="comment">//         6-3.发布</span></span><br><span class="line">    <span class="comment">// 7.spin</span></span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件此处略。</p>
<h3 id="4-订阅方-解析坐标信息并生成速度信息"><a href="#4-订阅方-解析坐标信息并生成速度信息" class="headerlink" title="4. 订阅方(解析坐标信息并生成速度信息)"></a>4. 订阅方(解析坐标信息并生成速度信息)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    订阅 turtle1 和 turtle2 的 TF 广播信息，查找并转换时间最近的 TF 信息</span></span><br><span class="line"><span class="comment">    将 turtle1 转换成相对 turtle2 的坐标，在计算线速度和角速度并发布</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现流程:</span></span><br><span class="line"><span class="comment">        1.包含头文件</span></span><br><span class="line"><span class="comment">        2.初始化 ros 节点</span></span><br><span class="line"><span class="comment">        3.创建 ros 句柄</span></span><br><span class="line"><span class="comment">        4.创建 TF 订阅对象</span></span><br><span class="line"><span class="comment">        5.处理订阅到的 TF</span></span><br><span class="line"><span class="comment">        6.spin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//1.包含头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2_ros/transform_listener.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;geometry_msgs/TransformStamped.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;geometry_msgs/Twist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.初始化 ros 节点</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;sub_TF&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.创建 ros 句柄</span></span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line">    <span class="comment">// 4.创建 TF 订阅对象</span></span><br><span class="line">    tf2_ros::Buffer buffer;</span><br><span class="line">    <span class="function">tf2_ros::TransformListener <span class="title">listener</span><span class="params">(buffer)</span></span>;</span><br><span class="line">    <span class="comment">// 5.处理订阅到的 TF</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要创建发布 /turtle2/cmd_vel 的 publisher 对象</span></span><br><span class="line"></span><br><span class="line">    ros::Publisher pub = nh.<span class="built_in">advertise</span>&lt;geometry_msgs::Twist&gt;(<span class="string">&quot;/turtle2/cmd_vel&quot;</span>,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function">ros::Rate <span class="title">rate</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//5-1.先获取 turtle1 相对 turtle2 的坐标信息</span></span><br><span class="line">            geometry_msgs::TransformStamped tfs = buffer.<span class="built_in">lookupTransform</span>(<span class="string">&quot;turtle2&quot;</span>,<span class="string">&quot;turtle1&quot;</span>,ros::<span class="built_in">Time</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//5-2.根据坐标信息生成速度信息 -- geometry_msgs/Twist.h</span></span><br><span class="line">            geometry_msgs::Twist twist;</span><br><span class="line">            twist.linear.x = <span class="number">0.5</span> * <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(tfs.transform.translation.x,<span class="number">2</span>) + <span class="built_in">pow</span>(tfs.transform.translation.y,<span class="number">2</span>));</span><br><span class="line">            twist.angular.z = <span class="number">4</span> * <span class="built_in">atan2</span>(tfs.transform.translation.y,tfs.transform.translation.x);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//5-3.发布速度信息 -- 需要提前创建 publish 对象</span></span><br><span class="line">            pub.<span class="built_in">publish</span>(twist);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">catch</span>(<span class="type">const</span> std::exception&amp; e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// std::cerr &lt;&lt; e.what() &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;错误提示:%s&quot;</span>,e.<span class="built_in">what</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        rate.<span class="built_in">sleep</span>();</span><br><span class="line">        <span class="comment">// 6.spin</span></span><br><span class="line">        ros::<span class="built_in">spinOnce</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件此处略。</p>
<h3 id="5-运行"><a href="#5-运行" class="headerlink" title="5. 运行"></a>5. 运行</h3><p>使用 launch 文件组织需要运行的节点，内容示例如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    tf2 实现小乌龟跟随案例</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动乌龟节点与键盘控制节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> <span class="attr">name</span>=<span class="string">&quot;turtle1&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtle_teleop_key&quot;</span> <span class="attr">name</span>=<span class="string">&quot;key_control&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动创建第二只乌龟的节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;demo_tf2_test&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Test01_Create_Turtle2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;turtle2&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动两个坐标发布节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;demo_tf2_test&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Test02_TF2_Caster&quot;</span> <span class="attr">name</span>=<span class="string">&quot;caster1&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">args</span>=<span class="string">&quot;turtle1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;demo_tf2_test&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Test02_TF2_Caster&quot;</span> <span class="attr">name</span>=<span class="string">&quot;caster2&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">args</span>=<span class="string">&quot;turtle2&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动坐标转换节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;demo_tf2_test&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Test03_TF2_Listener&quot;</span> <span class="attr">name</span>=<span class="string">&quot;listener&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="5-2-rosbag"><a href="#5-2-rosbag" class="headerlink" title="5.2 rosbag"></a>5.2 rosbag</h1><p>机器人传感器获取到的信息，有时我们可能需要处理，有时可能只是采集数据，事后分析，比如:</p>
<blockquote>
<p>机器人导航实现中，可能需要绘制导航所需的全局地图，地图绘制实现，有两种方式，方式1：可以控制机器人运动，将机器人传感器感知到的数据时时处理，生成地图信息。方式2：同样是控制机器人运动，将机器人传感器感知到的数据留存，事后，再重新读取数据，生成地图信息。两种方式比较，显然方式2使用上更为灵活方便。</p>
</blockquote>
<p>在ROS中关于数据的留存以及读取实现，提供了专门的工具: rosbag。</p>
<hr>
<p><strong>概念</strong></p>
<p>是用于录制和回放 ROS 主题的一个工具集。</p>
<p><strong>作用</strong></p>
<p>实现了数据的复用，方便调试、测试。</p>
<p><strong>本质</strong></p>
<p>rosbag本质也是ros的节点，当录制时，rosbag是一个订阅节点，可以订阅话题消息并将订阅到的数据写入磁盘文件；当重放时，rosbag是一个发布节点，可以读取磁盘文件，发布文件中的话题消息。</p>
<h2 id="5-2-1-rosbag-使用-命令行"><a href="#5-2-1-rosbag-使用-命令行" class="headerlink" title="5.2.1 rosbag 使用_命令行"></a>5.2.1 rosbag 使用_命令行</h2><p><strong>需求:</strong></p>
<p>ROS 内置的乌龟案例并操作，操作过程中使用 rosbag 录制，录制结束后，实现重放</p>
<p><strong>实现:</strong></p>
<ol>
<li><p>准备</p>
<p>创建目录保存录制的文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir ./xxx</span><br><span class="line"><span class="built_in">cd</span> xxx</span><br></pre></td></tr></table></figure>
</li>
<li><p>开始录制</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosbag record <span class="literal">-a</span> <span class="literal">-O</span> 目标文件</span><br></pre></td></tr></table></figure>

<p>操作小乌龟一段时间，结束录制使用 ctrl + c，在创建的目录中会生成bag文件。</p>
</li>
<li><p>查看文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosbag info 文件名</span><br></pre></td></tr></table></figure>
</li>
<li><p>回放文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosbag play 文件名</span><br></pre></td></tr></table></figure>

<p>重启乌龟节点，会发现，乌龟按照录制时的轨迹运动。</p>
</li>
</ol>
<h2 id="5-2-2-rosbag使用-编码"><a href="#5-2-2-rosbag使用-编码" class="headerlink" title="5.2.2 rosbag使用_编码"></a>5.2.2 rosbag使用_编码</h2><p>命令实现不够灵活，可以使用编码的方式，增强录制与回放的灵活性,本节将通过简单的读写实现演示rosbag的编码实现。</p>
<hr>
<p>方案A:C++实现</p>
<h3 id="1-写-bag"><a href="#1-写-bag" class="headerlink" title="1. 写 bag"></a>1. 写 bag</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rosbag/bag.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;std_msgs/String.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;bag_write&quot;</span>);</span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line">    <span class="comment">//创建bag对象</span></span><br><span class="line">    rosbag::Bag bag;</span><br><span class="line">    <span class="comment">//打开</span></span><br><span class="line">    bag.<span class="built_in">open</span>(<span class="string">&quot;/home/rosdemo/demo/test.bag&quot;</span>,rosbag::BagMode::Write);</span><br><span class="line">    <span class="comment">//写</span></span><br><span class="line">    std_msgs::String msg;</span><br><span class="line">    msg.data = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    bag.<span class="built_in">write</span>(<span class="string">&quot;/chatter&quot;</span>,ros::Time::<span class="built_in">now</span>(),msg);</span><br><span class="line">    bag.<span class="built_in">write</span>(<span class="string">&quot;/chatter&quot;</span>,ros::Time::<span class="built_in">now</span>(),msg);</span><br><span class="line">    bag.<span class="built_in">write</span>(<span class="string">&quot;/chatter&quot;</span>,ros::Time::<span class="built_in">now</span>(),msg);</span><br><span class="line">    bag.<span class="built_in">write</span>(<span class="string">&quot;/chatter&quot;</span>,ros::Time::<span class="built_in">now</span>(),msg);</span><br><span class="line">    <span class="comment">//关闭</span></span><br><span class="line">    bag.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-读bag"><a href="#2-读bag" class="headerlink" title="2. 读bag"></a>2. 读bag</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    读取 bag 文件：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rosbag/bag.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rosbag/view.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;std_msgs/String.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;std_msgs/Int32.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;bag_read&quot;</span>);</span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 bag 对象</span></span><br><span class="line">    rosbag::Bag bag;</span><br><span class="line">    <span class="comment">//打开 bag 文件</span></span><br><span class="line">    bag.<span class="built_in">open</span>(<span class="string">&quot;/home/rosdemo/demo/test.bag&quot;</span>,rosbag::BagMode::Read);</span><br><span class="line">    <span class="comment">//读数据</span></span><br><span class="line">    <span class="keyword">for</span> (rosbag::MessageInstance <span class="type">const</span> m : rosbag::<span class="built_in">View</span>(bag))</span><br><span class="line">    &#123;</span><br><span class="line">        std_msgs::String::ConstPtr p = m.<span class="built_in">instantiate</span>&lt;std_msgs::String&gt;();</span><br><span class="line">        <span class="keyword">if</span>(p != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;读取的数据:%s&quot;</span>,p-&gt;data.<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件流</span></span><br><span class="line">    bag.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-3-rqt工具箱"><a href="#5-3-rqt工具箱" class="headerlink" title="5.3 rqt工具箱"></a>5.3 rqt工具箱</h1><p>之前，在 ROS 中使用了一些实用的工具,比如: ros_bag 用于录制与回放、tf2_tools 可以生成 TF 树 ….. 这些工具大大提高了开发的便利性，但是也存在一些问题: 这些工具的启动和使用过程中涉及到一些命令操作，应用起来不够方便，在ROS中，提供了rqt工具箱，在调用工具时以图形化操作代替了命令操作，应用更便利，提高了操作效率，优化了用户体验。</p>
<hr>
<p><strong>概念</strong></p>
<p>ROS基于 QT 框架，针对机器人开发提供了一系列可视化的工具，这些工具的集合就是rqt</p>
<p><strong>作用</strong></p>
<p>可以方便的实现 ROS 可视化调试，并且在同一窗口中打开多个部件，提高开发效率，优化用户体验。</p>
<p><strong>组成</strong></p>
<p>rqt 工具箱组成有三大部分</p>
<ul>
<li>rqt——核心实现，开发人员无需关注</li>
<li>rqt_common_plugins——rqt 中常用的工具套件</li>
<li>rqt_robot_plugins——运行中和机器人交互的插件(比如: rviz)</li>
</ul>
<h2 id="5-3-1-rqt安装启动与基本使用"><a href="#5-3-1-rqt安装启动与基本使用" class="headerlink" title="5.3.1 rqt安装启动与基本使用"></a>5.3.1 rqt安装启动与基本使用</h2><p><strong>1.安装</strong></p>
<ul>
<li><p>一般只要你安装的是desktop-full版本就会自带工具箱</p>
</li>
<li><p>如果需要安装可以以如下方式安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo apt<span class="literal">-get</span> install ros<span class="literal">-noetic-rqt</span></span><br><span class="line"><span class="variable">$</span> sudo apt<span class="literal">-get</span> install ros<span class="literal">-noetic-rqt-common-plugins</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>2.启动</strong></p>
<p><code>rqt</code>的启动方式有两种:</p>
<ul>
<li>方式1:<code>rqt</code></li>
<li>方式2:<code>rosrun rqt_gui rqt_gui</code></li>
</ul>
<p><strong>3.基本使用</strong></p>
<p>启动 rqt 之后，可以通过 plugins 添加所需的插件</p>
<p><img src="/2024/05/30/5-ros%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/image-20240606145032177.png" alt="image-20240606145032177"></p>
<h2 id="5-3-2-rqt常用插件-rqt-graph"><a href="#5-3-2-rqt常用插件-rqt-graph" class="headerlink" title="5.3.2 rqt常用插件:rqt_graph"></a>5.3.2 rqt常用插件:rqt_graph</h2><p>**简介:**可视化显示计算图</p>
<p>**启动:**可以在 rqt 的 plugins 中添加，或者使用<code>rqt_graph</code>启动</p>
<p><img src="/2024/05/30/5-ros%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/image-20240606145104665.png" alt="image-20240606145104665"></p>
<h2 id="5-3-3-rqt常用插件-rqt-console"><a href="#5-3-3-rqt常用插件-rqt-console" class="headerlink" title="5.3.3 rqt常用插件:rqt_console"></a>5.3.3 rqt常用插件:rqt_console</h2><p>**简介:**rqt_console 是 ROS 中用于显示和过滤日志的图形化插件</p>
<p>**准备:**编写 Node 节点输出各个级别的日志信息</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    ROS 节点:输出各种级别的日志信息</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;log_demo&quot;</span>);</span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line"></span><br><span class="line">    <span class="function">ros::Rate <span class="title">r</span><span class="params">(<span class="number">0.3</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ROS_DEBUG</span>(<span class="string">&quot;Debug message d&quot;</span>);</span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Info message oooooooooooooo&quot;</span>);</span><br><span class="line">        <span class="built_in">ROS_WARN</span>(<span class="string">&quot;Warn message wwwww&quot;</span>);</span><br><span class="line">        <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;Erroe message EEEEEEEEEEEEEEEEEEEE&quot;</span>);</span><br><span class="line">        <span class="built_in">ROS_FATAL</span>(<span class="string">&quot;Fatal message FFFFFFFFFFFFFFFFFFFFFFFFFFFFF&quot;</span>);</span><br><span class="line">        r.<span class="built_in">sleep</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>启动:</strong></p>
<p>可以在 rqt 的 plugins 中添加，或者使用<code>rqt_console</code>启动</p>
<p><img src="/2024/05/30/5-ros%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/image-20240606145136457.png" alt="image-20240606145136457"></p>
<h2 id="5-3-4-rqt常用插件-rqt-plot"><a href="#5-3-4-rqt常用插件-rqt-plot" class="headerlink" title="5.3.4 rqt常用插件:rqt_plot"></a>5.3.4 rqt常用插件:rqt_plot</h2><p>**简介:**图形绘制插件，可以以 2D 绘图的方式绘制发布在 topic 上的数据</p>
<p>**准备:**启动 turtlesim 乌龟节点与键盘控制节点，通过 rqt_plot 获取乌龟位姿</p>
<p>**启动:**可以在 rqt 的 plugins 中添加，或者使用<code>rqt_plot</code>启动</p>
<p><img src="/2024/05/30/5-ros%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/image-20240606145303743.png" alt="image-20240606145303743"></p>
<h2 id="5-3-5-rqt常用插件-rqt-bag"><a href="#5-3-5-rqt常用插件-rqt-bag" class="headerlink" title="5.3.5 rqt常用插件:rqt_bag"></a>5.3.5 rqt常用插件:rqt_bag</h2><p>**简介:**录制和重放 bag 文件的图形化插件</p>
<p>**准备:**启动 turtlesim 乌龟节点与键盘控制节点</p>
<p>**启动:**可以在 rqt 的 plugins 中添加，或者使用<code>rqt_bag</code>启动</p>
<p><strong>录制:</strong></p>
<p><img src="/2024/05/30/5-ros%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/image-20240606150036521.png" alt="image-20240606150036521"></p>
<p><strong>重放:</strong></p>
<p><img src="/2024/05/30/5-ros%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/image-20240606150123430.png" alt="image-20240606150123430"></p>
]]></content>
      <categories>
        <category>ros</category>
      </categories>
      <tags>
        <tag>ros</tag>
      </tags>
  </entry>
  <entry>
    <title>4 ros运行管理</title>
    <url>/2024/05/07/4-ros%E8%BF%90%E8%A1%8C%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>​	一个完整的ros系统，可能包括多台主机可能包含多台主机；每台主机上又有多个工作空间(workspace)；每个的工作空间中又包含多个功能包(package)；每个功能包又包含多个节点(Node)，不同的节点都有自己的节点名称；每个节点可能还会设置一个或多个话题(topic)，因此我们需要对ros的运行进行管理。</p>
<hr>
<h1 id="4-1-ROS元功能包"><a href="#4-1-ROS元功能包" class="headerlink" title="4.1 ROS元功能包"></a>4.1 ROS元功能包</h1><p>​	元功能包（Meta Package）是Linux的一个文件管理系统的概念。是ROS中的一个虚包，里面没有实质性的内容，但是它依赖了其他的软件包，通过这种方法可以把其他包组合起来，我们可以认为它是一本书的目录索引，告诉我们这个包集合中有哪些子包，并且该去哪里下载。</p>
<p>​	作用：提供了一种方式可以将不同的功能包打包成一个功能包，当安装某个复杂功能模块时，直接调用打包后的功能包即可</p>
<p>​	用法：</p>
<ol>
<li><p>新建一个功能包，与需集成的功能包在同一工作空间，无任何依赖（元功能包是ROS中的一个虚包）</p>
</li>
<li><p>修改 <strong>package.xml</strong> ,内容如下:</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>被集成的功能包<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>被集成的功能包<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line">.....</span><br><span class="line"><span class="tag">&lt;<span class="name">export</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">metapackage</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">export</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="3">
<li>修改 <strong>CMakeLists.txt</strong> ,内容如下:</li>
</ol>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#前三行 CMakeLists 原本就存在</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>.<span class="number">2</span>)</span><br><span class="line"><span class="keyword">project</span>(demo)</span><br><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED)</span><br><span class="line"><span class="comment">#第四行需要填上</span></span><br><span class="line">catkin_metapackage()</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="4-2-ROS节点运行管理launch文件"><a href="#4-2-ROS节点运行管理launch文件" class="headerlink" title="4.2 ROS节点运行管理launch文件"></a>4.2 ROS节点运行管理launch文件</h1><p>launch 文件是一个 XML 格式的文件，可以启动本地和远程的多个节点，还可以在参数服务器中设置参数。</p>
<p>作用：简化节点的配置与启动，提高ROS程序的启动效率。</p>
<ol>
<li><p>新建launch文件：在功能包下添加 launch目录, 目录下新建 xxxx.launch 文件，编辑 launch 文件</p>
<ul>
<li><p>含子标签开头&lt;—&gt;</p>
</li>
<li><p>含子标签结尾&lt;&#x2F;—&gt;</p>
</li>
<li><p>不含子标签&lt;—&#x2F;&gt;</p>
</li>
<li><p>子标签注意退格（Tab）</p>
</li>
</ul>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;功能包名&quot;</span> <span class="attr">type</span>=<span class="string">&quot;节点文件名&quot;</span> <span class="attr">name</span>=<span class="string">&quot;映射名&quot;</span> <span class="attr">output</span>=<span class="string">&quot;日志输出目标（可省略）&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myTurtle&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>调用 launch 文件</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">source ./devel/setup.bash</span><br><span class="line">roslaunch 包名 文件名.launch</span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong> roslaunch 命令执行launch文件时, 首先会判断是否启动了 roscore , 如果启动了, 则不再启动, 否则, 会自动调用 roscore</p>
<h2 id="launch文件标签之-launch"><a href="#launch文件标签之-launch" class="headerlink" title="launch文件标签之 launch"></a>launch文件标签之 launch</h2><p><code>&lt;launch&gt;</code>标签是所有 launch 文件的根标签，充当其他标签的容器</p>
<ol>
<li>属性</li>
</ol>
<ul>
<li><code>deprecated = &quot;弃用声明&quot;</code> 告知用户当前 launch 文件已经弃用</li>
</ul>
<ol start="2">
<li>子级标签</li>
</ol>
<ul>
<li>所有其它标签都是launch的子级</li>
</ul>
<h2 id="launch文件标签之-node"><a href="#launch文件标签之-node" class="headerlink" title="launch文件标签之 node"></a>launch文件标签之 node</h2><p><code>&lt;node&gt;</code>标签用于指定 ROS 节点，是最常见的标签，需要注意的是: roslaunch 命令不能保证按照 node 的声明顺序来启动节点(节点的启动是多进程的)</p>
<ol>
<li>属性</li>
</ol>
<ul>
<li><p>pkg&#x3D;”功能包名”</p>
<p>节点所属的包</p>
</li>
<li><p>type&#x3D;”节点文件名”</p>
<p>节点类型(与之相同名称的可执行文件)</p>
</li>
<li><p>name&#x3D;”映射名”</p>
<p>节点名称(在 ROS 网络拓扑中节点的名称)</p>
</li>
<li><p>args&#x3D;”xxx xxx xxx” (可选)</p>
<p>将参数传递给节点</p>
</li>
<li><p>machine&#x3D;”机器名”</p>
<p>在指定机器上启动节点</p>
</li>
<li><p>respawn&#x3D;”true | false” (可选)</p>
<p>如果节点退出，是否自动重启</p>
</li>
<li><p>respawn_delay&#x3D;” N” (可选)</p>
<p>如果 respawn 为 true, 那么延迟 N 秒后启动节点</p>
</li>
<li><p>required&#x3D;”true | false” (可选)</p>
<p>该节点是否必须，如果为 true,那么如果该节点退出，将杀死整个 roslaunch</p>
</li>
<li><p>ns&#x3D;”xxx” (可选)</p>
<p>在指定命名空间 xxx 中启动节点</p>
</li>
<li><p>clear_params&#x3D;”true | false” (可选)</p>
<p>在启动前，删除节点的私有空间的所有参数</p>
</li>
<li><p>output&#x3D;”log | screen” (可选)</p>
<p>日志发送目标，可以设置为 log 日志文件，或 screen 屏幕,默认是 log</p>
</li>
</ul>
<ol start="2">
<li>子级标签</li>
</ol>
<ul>
<li>env 环境变量设置</li>
<li>remap 重映射节点名称</li>
<li>rosparam 参数设置</li>
<li>param 参数设置</li>
</ul>
<h2 id="launch文件标签之-include"><a href="#launch文件标签之-include" class="headerlink" title="launch文件标签之 include"></a>launch文件标签之 include</h2><p><code>include</code>标签用于将另一个 xml 格式的 launch 文件导入到当前文件</p>
<ol>
<li>属性</li>
</ol>
<ul>
<li><p>file&#x3D;”$(find 包名)&#x2F;xxx&#x2F;xxx.launch”（要包含的文件路径）</p>
</li>
<li><p>ns&#x3D;”xxx” (可选)</p>
<p>在指定命名空间导入文件</p>
</li>
</ul>
<ol start="2">
<li>子级标签</li>
</ol>
<ul>
<li>env 环境变量设置</li>
<li>arg 将参数传递给被包含的文件</li>
</ul>
<h2 id="launch文件标签之-remap"><a href="#launch文件标签之-remap" class="headerlink" title="launch文件标签之 remap"></a>launch文件标签之 remap</h2><p>用于话题重命名</p>
<ol>
<li>属性</li>
</ol>
<ul>
<li>from&#x3D;”xxx” 原始话题名称</li>
<li>to&#x3D;”yyy” 目标名称</li>
</ul>
<h2 id="launch文件标签之-param"><a href="#launch文件标签之-param" class="headerlink" title="launch文件标签之 param"></a>launch文件标签之 param</h2><p><code>&lt;param&gt;</code>标签主要用于在参数服务器上设置参数，参数源可以在标签中通过 value 指定，也可以通过外部文件加载，在<code>&lt;node&gt;</code>标签中时，相当于私有命名空间。</p>
<ol>
<li>属性</li>
</ol>
<ul>
<li><p>name&#x3D;”命名空间&#x2F;参数名”</p>
<p>参数名称，可以包含命名空间</p>
</li>
<li><p>value&#x3D;”xxx” (可选)</p>
<p>定义参数值，如果此处省略，必须指定外部文件作为参数源</p>
</li>
<li><p>type&#x3D;”str | int | double | bool | yaml” (可选)</p>
<p>指定参数类型，如果未指定，roslaunch 会尝试确定参数类型，规则如下:</p>
<ul>
<li>如果包含 ‘.’ 的数字解析为浮点型，否则为整型</li>
<li>“true” 和 “false” 是 bool 值(不区分大小写)</li>
<li>其他是字符串</li>
</ul>
</li>
</ul>
<h2 id="launch文件标签之rosparam"><a href="#launch文件标签之rosparam" class="headerlink" title="launch文件标签之rosparam"></a>launch文件标签之rosparam</h2><p><code>&lt;rosparam&gt;</code>标签可以从 YAML 文件导入参数，或将参数导出到 YAML 文件，也可以用来删除参数，<code>&lt;rosparam&gt;</code>标签在<code>&lt;node&gt;</code>标签中时被视为私有。</p>
<ol>
<li>属性</li>
</ol>
<ul>
<li><p>command&#x3D;”load | dump | delete” (可选，默认 load)</p>
<p>加载、导出或删除参数</p>
</li>
<li><p>file&#x3D;”$(find xxxxx)&#x2F;xxx&#x2F;yyy….”</p>
<p>加载或导出到的 yaml 文件</p>
</li>
<li><p>param&#x3D;”参数名称”</p>
</li>
<li><p>ns&#x3D;”命名空间” (可选)</p>
</li>
</ul>
<h2 id="launch文件标签之group"><a href="#launch文件标签之group" class="headerlink" title="launch文件标签之group"></a>launch文件标签之group</h2><p><code>&lt;group&gt;</code>标签可以对节点分组，具有 ns 属性，可以让节点归属某个命名空间</p>
<ol>
<li>属性</li>
</ol>
<ul>
<li><p>ns&#x3D;”名称空间” (可选)</p>
</li>
<li><p>clear_params&#x3D;”true | false” (可选)</p>
<p>启动前，是否删除组名称空间的所有参数(慎用….此功能危险)</p>
</li>
</ul>
<ol start="2">
<li>子级标签</li>
</ol>
<ul>
<li>除了launch 标签外的其他标签</li>
</ul>
<h2 id="launch文件标签之arg"><a href="#launch文件标签之arg" class="headerlink" title="launch文件标签之arg"></a>launch文件标签之arg</h2><p><code>&lt;arg&gt;</code>标签是用于动态传参，类似于函数的参数，可以增强launch文件的灵活性</p>
<ol>
<li>属性</li>
</ol>
<ul>
<li><p>name&#x3D;”参数名称”</p>
</li>
<li><p>default&#x3D;”默认值” (可选)</p>
</li>
<li><p>value&#x3D;”数值” (可选)</p>
<p>不可以与 default 并存</p>
</li>
<li><p>doc&#x3D;”描述”</p>
<p>参数说明</p>
</li>
</ul>
<ol start="2">
<li>示例</li>
</ol>
<ul>
<li><p>launch文件传参语法实现,hello.lcaunch</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;param&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg xxx)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>命令行调用launch传参</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">roslaunch hello.launch xxx:=值</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h1 id="4-3-ROS节点名称重名"><a href="#4-3-ROS节点名称重名" class="headerlink" title="4.3 ROS节点名称重名"></a>4.3 ROS节点名称重名</h1><p>所谓ROS节点名称重名，就是同一个节点文件的在同一时间段内的多次使用，造成的节点名冲突</p>
<p>解决策略：</p>
<ul>
<li>使用命名空间：就是为名称添加前缀</li>
<li>名称重映射：为名称起别名</li>
</ul>
<h2 id="rosrun-设置命名空间与重映射"><a href="#rosrun-设置命名空间与重映射" class="headerlink" title="rosrun 设置命名空间与重映射"></a>rosrun 设置命名空间与重映射</h2><p><strong>1.命名空间：</strong></p>
<p>语法: rosrun 功能包名 节点名 __ns:&#x3D;新名称</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosrun turtlesim turtlesim_node __ns:=/xxx</span><br><span class="line">rosrun turtlesim turtlesim_node __ns:=/yyy</span><br></pre></td></tr></table></figure>

<p><code>rosnode list</code>查看节点信息,显示结果:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/xxx/turtlesim</span><br><span class="line">/yyy/turtlesim</span><br></pre></td></tr></table></figure>

<p><strong>2.重映射：</strong></p>
<p>语法: rosrun 包名 节点名 __name:&#x3D;新名称</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosrun turtlesim  turtlesim_node __name:=t1 <span class="comment">#任意一种即可</span></span><br><span class="line">rosrun turtlesim  turtlesim_node /turtlesim:=t1</span><br><span class="line"></span><br><span class="line">rosrun turtlesim  turtlesim_node __name:=t2</span><br><span class="line">rosrun turtlesim  turtlesim_node /turtlesim:=t2</span><br></pre></td></tr></table></figure>

<p><code>rosnode list</code>查看节点信息,显示结果:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/t1</span><br><span class="line">/t2</span><br></pre></td></tr></table></figure>

<p><strong>设置命名空间同时名称重映射</strong></p>
<p>语法: rosrun 包名 节点名 __ns:&#x3D;新名称 __name:&#x3D;新名称</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosrun turtlesim turtlesim_node __ns:=/xxx __name:=tn</span><br></pre></td></tr></table></figure>

<h2 id="launch文件设置命名空间与重映射"><a href="#launch文件设置命名空间与重映射" class="headerlink" title="launch文件设置命名空间与重映射"></a>launch文件设置命名空间与重映射</h2><p><strong>1.launch文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> <span class="attr">name</span>=<span class="string">&quot;t1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> <span class="attr">name</span>=<span class="string">&quot;t2&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> <span class="attr">name</span>=<span class="string">&quot;t1&quot;</span> <span class="attr">ns</span>=<span class="string">&quot;hello&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 node 标签中，name 属性是必须的，ns 可选。</p>
<p><strong>2.运行</strong></p>
<p><code>rosnode list</code>查看节点信息,显示结果:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/t1</span><br><span class="line">/t2</span><br><span class="line">/t1/hello</span><br></pre></td></tr></table></figure>

<h2 id="编码设置命名空间与重映射"><a href="#编码设置命名空间与重映射" class="headerlink" title="编码设置命名空间与重映射"></a>编码设置命名空间与重映射</h2><p><strong>重映射</strong></p>
<p>核心代码:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;zhangsan&quot;</span>,ros::init_options::AnonymousName);</span><br><span class="line"><span class="comment">//会在名称后面添加时间戳。</span></span><br></pre></td></tr></table></figure>



<p><strong>命名空间</strong></p>
<p>核心代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::map&lt;std::string, std::string&gt; map;</span><br><span class="line">map[<span class="string">&quot;__ns&quot;</span>] = <span class="string">&quot;xxxx&quot;</span>;</span><br><span class="line">ros::<span class="built_in">init</span>(map,<span class="string">&quot;wangqiang&quot;</span>); <span class="comment">// 不再传递argc，argv而是传递一个map集合节点名称</span></span><br><span class="line"><span class="comment">//节点名称设置了命名空间。</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="4-4-ROS话题名称设置"><a href="#4-4-ROS话题名称设置" class="headerlink" title="4.4 ROS话题名称设置"></a>4.4 ROS话题名称设置</h1><p>在实际应用中，按照逻辑，有些时候可能需要将相同的话题名称设置为不同，也有可能将不同的话题名设置为相同。在ROS中给出的解决策略也是使用<strong>名称重映射或为名称添加前缀</strong>。根据前缀不同，有全局、相对、和私有三种类型之分。</p>
<ul>
<li>全局(参数名称直接参考ROS系统，与节点命名空间平级)</li>
<li>相对(参数名称参考的是节点的命名空间，与节点名称平级)</li>
<li>私有(参数名称参考节点名称，是节点名称的子级)</li>
</ul>
<h2 id="rosrun设置话题重映射"><a href="#rosrun设置话题重映射" class="headerlink" title="rosrun设置话题重映射"></a>rosrun设置话题重映射</h2><p><em>rosrun名称重映射语法: rorun 包名 节点名 话题名:&#x3D;新话题名称</em>*</p>
<p>将 teleop_twist_keyboard 节点的话题设置为<code>/turtle1/cmd_vel</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosrun teleop_twist_keyboard teleop_twist_keyboard.py /cmd_vel:=/turtle1/cmd_vel</span><br><span class="line">rosrun 功能包名				  节点名                    话题名 := 新话题名</span><br></pre></td></tr></table></figure>



<h2 id="launch文件设置话题重映射"><a href="#launch文件设置话题重映射" class="headerlink" title="launch文件设置话题重映射"></a>launch文件设置话题重映射</h2><p><em>launch 文件设置话题重映射语法:</em>*</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">&quot;原话题&quot;</span> <span class="attr">to</span>=<span class="string">&quot;新话题&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="编码设置话题名称"><a href="#编码设置话题名称" class="headerlink" title="编码设置话题名称"></a>编码设置话题名称</h2><p>话题的名称与节点的命名空间、节点的名称是有一定关系的，话题名称大致可以分为三种类型:</p>
<ul>
<li>全局(话题参考ROS系统，与节点命名空间平级)</li>
<li>相对(话题参考的是节点的命名空间，与节点名称平级)</li>
<li>私有(话题参考节点名称，是节点名称的子级)</li>
</ul>
<p>结合编码演示具体关系。</p>
<h3 id="1-全局名称"><a href="#1-全局名称" class="headerlink" title="1. 全局名称"></a>1. 全局名称</h3><p><strong>格式:以<code>/</code>开头的名称，和节点名称无关</strong></p>
<p>比如：<code>/参数名称</code></p>
<p>示例1:<code>ros::Publisher pub = nh.advertise&lt;std_msgs::String&gt;(&quot;/chatter&quot;,1000);</code></p>
<p>结果1**:**<code>/chatter</code></p>
<p>示例2:<code>ros::Publisher pub = nh.advertise&lt;std_msgs::String&gt;(&quot;/chatter/money&quot;,1000);</code></p>
<p>结果2:<code>/chatter/money</code></p>
<h3 id="2-相对名称"><a href="#2-相对名称" class="headerlink" title="2. 相对名称"></a>2. 相对名称</h3><p><strong>格式:非<code>/</code>开头的名称,参考命名空间(与节点名称平级)来确定话题名称</strong></p>
<p>示例1:<code>ros::Publisher pub = nh.advertise&lt;std_msgs::String&gt;(&quot;chatter&quot;,1000);</code></p>
<p>结果1:<code>/命名空间/chatter</code></p>
<p>示例2:<code>ros::Publisher pub = nh.advertise&lt;std_msgs::String&gt;(&quot;chatter/money&quot;,1000);</code></p>
<p>结果2:<code>/命名空间/chatter/money</code></p>
<h3 id="3-私有名称"><a href="#3-私有名称" class="headerlink" title="3. 私有名称"></a>3. 私有名称</h3><p><strong>格式:以<code>~</code>开头的名称</strong></p>
<p>示例1:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ros::NodeHandle <span class="title">nh</span><span class="params">(<span class="string">&quot;~&quot;</span>)</span></span>;</span><br><span class="line">ros::Publisher pub = nh.<span class="built_in">advertise</span>&lt;std_msgs::String&gt;(<span class="string">&quot;chatter&quot;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>结果1:<code>/节点名称/chatter</code> 或 <code>/命名空间/节点名称/chatter</code></p>
<p><em>PS:当使用</em><code>~</code><em>,而话题名称有时</em><code>/</code><em>开头时，那么话题名称是绝对的</em></p>
<p>示例2:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ros::NodeHandle <span class="title">nh</span><span class="params">(<span class="string">&quot;~&quot;</span>)</span></span>;</span><br><span class="line">ros::Publisher pub = nh.<span class="built_in">advertise</span>&lt;std_msgs::String&gt;(<span class="string">&quot;/chatter/money&quot;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>结果2:<code>/chatter/money</code></p>
<h1 id="4-5-ROS参数名称设置"><a href="#4-5-ROS参数名称设置" class="headerlink" title="4.5 ROS参数名称设置"></a>4.5 ROS参数名称设置</h1><p>在ROS中节点中，当参数名称重名时，会产生覆盖，如何避免。</p>
<p>关于参数重名的处理，<strong>没有重映射实现</strong>，为了尽量的避免参数重名，都是使用<strong>为参数名添加前缀</strong>的方式，实现类似于话题名称，有全局、相对、和私有三种类型之分。</p>
<ul>
<li>全局(参数名称直接参考ROS系统，与节点命名空间平级)</li>
<li>相对(参数名称参考的是节点的命名空间，与节点名称平级)</li>
<li>私有(参数名称参考节点名称，是节点名称的子级)</li>
</ul>
<p>设置参数的方式也有三种:</p>
<ul>
<li>rosrun 命令</li>
<li>launch 文件</li>
<li>编码实现</li>
</ul>
<h2 id="rosrun设置参数"><a href="#rosrun设置参数" class="headerlink" title="rosrun设置参数"></a>rosrun设置参数</h2><p>rosrun 在启动节点时，也可以设置参数:</p>
<p><strong>私有模式，参考的是 &#x2F;命名空间(功能包名)&#x2F;参数名称</strong></p>
<p><strong>语法:</strong> rosrun 包名 节点名称 _参数名:&#x3D;参数值</p>
<ol>
<li><p>设置参数</p>
<p>启动乌龟显示节点，并设置参数 _A &#x3D; 100</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosrun turtlesim turtlesim_node _A:=<span class="number">100</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行结果</p>
<p><code>rosparam list</code>查看节点信息,显示结果:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/turtlesim/A <span class="comment">#有节点名称前缀，所以为私有模式，即该节点私有，（turtlesim_node的名字就是turtlesim）</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="launch文件设置参数"><a href="#launch文件设置参数" class="headerlink" title="launch文件设置参数"></a>launch文件设置参数</h2><p>通过 launch 文件设置参数的方式前面已经介绍过了，可以在 node 标签外，或 node 标签中通过 param 或 rosparam 来设置参数。在 <strong>node 标签外设置的参数是全局性质的</strong>，参考的是 <strong>&#x2F;</strong> ，<strong>在 node 标签中设置的参数是私有性质的</strong>，参考的是 <strong>&#x2F;节点名称&#x2F;参数名称</strong>。</p>
<ol>
<li><p>设置参数</p>
<p>以 param 标签为例，设置参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;p1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> <span class="attr">name</span>=<span class="string">&quot;t1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;p2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行</p>
<p><code>rosparam list</code>查看节点信息,显示结果:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/p1</span><br><span class="line">/t1/p2</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="编码设置参数"><a href="#编码设置参数" class="headerlink" title="编码设置参数"></a>编码设置参数</h2><p>编码的方式可以更方便的设置:全局、相对与私有参数。</p>
<h3 id="1-ros-param设置参数"><a href="#1-ros-param设置参数" class="headerlink" title="1. ros::param设置参数"></a>1. ros::param设置参数</h3><p>设置参数调用API是ros::param::set，该函数中，参数1传入参数名称，参数2是传入参数值，参数1中参数名称设置时，如果以 &#x2F; 开头，那么就是全局参数，如果以 ~ 开头，那么就是私有参数，既不以 &#x2F; 也不以 ~ 开头，那么就是相对参数。代码示例:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ros::param::<span class="built_in">set</span>(<span class="string">&quot;/set_A&quot;</span>,<span class="number">100</span>); <span class="comment">//全局,和命名空间以及节点名称无关</span></span><br><span class="line">ros::param::<span class="built_in">set</span>(<span class="string">&quot;set_B&quot;</span>,<span class="number">100</span>); <span class="comment">//相对,参考命名空间</span></span><br><span class="line">ros::param::<span class="built_in">set</span>(<span class="string">&quot;~set_C&quot;</span>,<span class="number">100</span>); <span class="comment">//私有,参考命名空间与节点名称</span></span><br></pre></td></tr></table></figure>

<p>运行时，假设设置的 namespace 为 xxx，节点名称为 yyy，使用 rosparam list 查看:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/set_A</span><br><span class="line">/xxx/set_B</span><br><span class="line">/xxx/yyy/set_C</span><br></pre></td></tr></table></figure>



<h3 id="2-ros-NodeHandle设置参数"><a href="#2-ros-NodeHandle设置参数" class="headerlink" title="2. ros::NodeHandle设置参数"></a>2. ros::NodeHandle设置参数</h3><p>如果参数名以 &#x2F; 开头，那么就是全局参数</p>
<p>如果参数名不以 &#x2F; 开头，如果NodeHandle 对象创建时如果是调用的默认的无参构造，那么该参数是相对参数</p>
<p>如果NodeHandle 对象创建时是使用：ros::NodeHandle nh(“~”)，那么该参数就是私有参数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ros::NodeHandle nh;</span><br><span class="line">nh.<span class="built_in">setParam</span>(<span class="string">&quot;/nh_A&quot;</span>,<span class="number">100</span>); <span class="comment">//全局,和命名空间以及节点名称无关</span></span><br><span class="line"></span><br><span class="line">nh.<span class="built_in">setParam</span>(<span class="string">&quot;nh_B&quot;</span>,<span class="number">100</span>); <span class="comment">//相对,参考命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="function">ros::NodeHandle <span class="title">nh_private</span><span class="params">(<span class="string">&quot;~&quot;</span>)</span></span>;</span><br><span class="line">nh_private.<span class="built_in">setParam</span>(<span class="string">&quot;nh_C&quot;</span>,<span class="number">100</span>);<span class="comment">//私有,参考命名空间与节点名称</span></span><br></pre></td></tr></table></figure>

<p>运行时，假设设置的 namespace 为 xxx，节点名称为 yyy，使用 rosparam list 查看:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/nh_A</span><br><span class="line">/xxx/nh_B</span><br><span class="line">/xxx/yyy/nh_C</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="4-6-ROS分布式通信"><a href="#4-6-ROS分布式通信" class="headerlink" title="4.6 ROS分布式通信"></a>4.6 ROS分布式通信</h1><p>ROS是一个分布式计算环境。一个运行中的ROS系统可以包含分布在多台计算机上多个节点。根据系统的配置方式，任何节点可能随时需要与任何其他节点进行通信。</p>
<p>因此，ROS对网络配置有某些要求：</p>
<ul>
<li>所有端口上的所有机器之间必须有完整的双向连接。</li>
<li>每台计算机必须通过所有其他计算机都可以解析的名称来公告自己。</li>
</ul>
<ol>
<li><p><strong>设备准备</strong></p>
<p>先要保证不同计算机处于同一网络中，最好分别设置固定IP，如果为虚拟机，需要将网络适配器改为桥接模式；</p>
</li>
<li><p><strong>配置文件修改</strong></p>
<p>分别修改不同计算机的 &#x2F;etc&#x2F;hosts 文件，在该文件中加入对方的IP地址和计算机名:</p>
<p>主机端:<code>从机的IP    从机计算机名</code></p>
<p>从机端:<code>主机的IP    主机计算机名</code></p>
<p>设置完毕，可以通过 ping 命令测试网络通信是否正常。</p>
<blockquote>
<p>用shell查看IP地址: ifconfig</p>
<p>用shell查看计算机名称: hostname</p>
</blockquote>
</li>
<li><p><strong>配置主机IP</strong></p>
<p>配置主机的 IP 地址</p>
<p>~&#x2F;.bashrc 追加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ROS_MASTER_URI=http://主机IP:11311</span><br><span class="line"><span class="built_in">export</span> ROS_HOSTNAME=主机IP</span><br></pre></td></tr></table></figure>

<p>配置从机的 IP 地址，从机可以有多台，每台都做如下设置:</p>
<p>~&#x2F;.bashrc 追加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ROS_MASTER_URI=http://主机IP:11311</span><br><span class="line"><span class="built_in">export</span> ROS_HOSTNAME=从机IP</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试</strong></p>
<p>1.主机启动 roscore(必须)</p>
<p>2.主机启动订阅节点，从机启动发布节点，测试通信是否正常</p>
<p>3.反向测试，主机启动发布节点，从机启动订阅节点，测试通信是否正常</p>
</li>
</ol>
]]></content>
      <categories>
        <category>ros</category>
      </categories>
      <tags>
        <tag>ros</tag>
      </tags>
  </entry>
  <entry>
    <title>6 机器人系统仿真</title>
    <url>/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/</url>
    <content><![CDATA[<h1 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h1><p>机器人操作系统学习、开发与测试过程中，会遇到诸多问题，比如:</p>
<blockquote>
<p>场景1:机器人一般价格不菲，学习ROS要购买一台机器人吗？</p>
<p>场景2:机器人与之交互的外界环境具有多样性，如何实现复杂的环境设计？</p>
<p>场景3:测试时，直接将未经验证的程序部署到实体机器人运行，安全吗？</p>
</blockquote>
<p>在诸如此类的场景中，ROS中的<strong>仿真</strong>就显得尤为重要了。</p>
<hr>
<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h2><p><strong>机器人系统仿真：</strong>是通过计算机对实体机器人系统进行模拟的技术，在 ROS 中，仿真实现涉及的内容主要有三:对机器人建模(<strong>URDF</strong>)、创建仿真环境(<strong>Gazebo</strong>)以及感知环境(<strong>Rviz</strong>)等系统性实现。</p>
<h2 id="2-作用"><a href="#2-作用" class="headerlink" title="2 作用"></a>2 作用</h2><p><strong>1. 仿真优势</strong></p>
<p>仿真在机器人系统研发过程中占有举足轻重的地位，在研发与测试中较之于实体机器人实现，仿真有如下几点的显著优势:</p>
<ol>
<li><p><strong>低成本:</strong> 当前机器人成本居高不下，动辄几十万，仿真可以大大降低成本，减小风险</p>
</li>
<li><p><strong>高效:</strong> 搭建的环境更为多样且灵活，可以提高测试效率以及测试覆盖率</p>
</li>
<li><p><strong>高安全性:</strong> 仿真环境下，无需考虑耗损问题</p>
</li>
</ol>
<p><strong>2. 仿真缺陷</strong></p>
<p>机器人在仿真环境与实际环境下的表现差异较大，换言之，仿真并不能完全做到模拟真实的物理世界，存在一些”失真”的情况，原因:</p>
<ol>
<li><p>仿真器所使用的物理引擎目前还不能够完全精确模拟真实世界的物理情况</p>
</li>
<li><p>仿真器构建的是关节驱动器（电机&amp;齿轮箱）、传感器与信号通信的绝对理想情况，目前不支持模拟实际硬件缺陷或者一些临界状态等情形</p>
</li>
</ol>
<h2 id="3-相关组件"><a href="#3-相关组件" class="headerlink" title="3 相关组件"></a>3 相关组件</h2><h3 id="3-1-URDF"><a href="#3-1-URDF" class="headerlink" title="3.1 URDF"></a>3.1 URDF</h3><p><strong>URDF</strong>是 Unified Robot Description Format 的首字母缩写，直译为<strong>统一(标准化)机器人描述格式</strong>，可以以一种 XML 的方式描述机器人的部分结构，比如底盘、摄像头、激光雷达、机械臂以及不同关节的自由度…..,该文件可以被 C++ 内置的解释器转换成可视化的机器人模型，是 ROS 中实现机器人仿真的重要组件</p>
<h3 id="3-2-rviz"><a href="#3-2-rviz" class="headerlink" title="3.2 rviz"></a>3.2 rviz</h3><p>RViz 是 ROS Visualization Tool 的首字母缩写，直译为<strong>ROS的三维可视化工具</strong>。它的主要目的是以三维方式显示ROS消息，可以将 数据进行可视化表达。例如:可以显示机器人模型，可以无需编程就能表达激光测距仪（LRF）传感器中的传感 器到障碍物的距离，RealSense、Kinect或Xtion等三维距离传感器的点云数据（PCD， Point Cloud Data），从相机获取的图像值等</p>
<p>以“ros- [ROS_DISTRO] -desktop-full”命令安装ROS时，RViz会默认被安装。</p>
<p>运行使用命令<code>rviz</code>或<code>rosrun rviz rviz</code></p>
<p><em><strong>如果rviz没有安装，请调用如下命令自行安装:</strong></em></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt install ros-[<span class="type">ROS_DISTRO</span>]<span class="literal">-rviz</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-gazebo"><a href="#3-3-gazebo" class="headerlink" title="3.3 gazebo"></a>3.3 gazebo</h3><p>Gazebo是一款3D动态模拟器，用于显示机器人模型并创建仿真环境,能够在复杂的室内和室外环境中准确有效地模拟机器人。与游戏引擎提供高保真度的视觉模拟类似，Gazebo提供高保真度的物理模拟，其提供一整套传感器模型，以及对用户和程序非常友好的交互方式。</p>
<p>以“ros- [ROS_DISTRO] -desktop-full”命令安装ROS时，gzebo会默认被安装。</p>
<p>运行使用命令<code>gazebo</code>或<code>rosrun gazebo_ros gazebo</code></p>
<p>**注意1:**<em><strong>在 Ubuntu20.04 与 ROS Noetic 环境下，gazebo 启动异常以及解决</strong></em></p>
<ul>
<li><p>**问题1: **VMware: vmw_ioctl_command error Invalid argument(无效的参数)</p>
<p><strong>解决:</strong></p>
<p><code>echo &quot;export SVGA_VGPU10=0&quot; &gt;&gt; ~/.bashrc</code></p>
<p><code>source .bashrc</code></p>
</li>
<li><p><strong>问题2:</strong> [Err] [REST.cc:205] Error in REST request</p>
<p><strong>解决:</strong><code>sudo gedit ~/.ignition/fuel/config.yaml</code></p>
<p>然后将<code>url : https://api.ignitionfuel.org</code>使用 # 注释</p>
<p>再添加<code>url: https://api.ignitionrobotics.org</code></p>
</li>
<li><p><strong>问题3:</strong> 启动时抛出异常:<code>[gazebo-2] process has died [pid xxx, exit code 255, cmd.....</code></p>
<p><strong>解决:</strong> <code>killall gzserver</code>和<code>killall gzclient</code></p>
</li>
</ul>
<p>**注意2:**如果 gazebo没有安装，请自行安装:</p>
<p>1.添加源:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo sh <span class="literal">-c</span> <span class="string">&#x27;echo &quot;deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main&quot; </span></span><br><span class="line"><span class="string">&gt;</span></span><br><span class="line"><span class="string"> /etc/apt/sources.list.d/gazebo-stable.list&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">wget</span> http://packages.osrfoundation.org/gazebo.key <span class="literal">-O</span> - | sudo apt<span class="literal">-key</span> add -</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.安装：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install gazebo11 </span><br><span class="line">sudo apt install libgazebo11<span class="literal">-dev</span></span><br></pre></td></tr></table></figure>

<h1 id="6-2-URDF集成Rviz基本流程"><a href="#6-2-URDF集成Rviz基本流程" class="headerlink" title="6.2 URDF集成Rviz基本流程"></a>6.2 URDF集成Rviz基本流程</h1><p>前面介绍过，URDF 不能单独使用，需要结合 Rviz 或 Gazebo，URDF 只是一个文件，需要在 Rviz 或 Gazebo 中渲染成图形化的机器人模型，当前，首先演示URDF与Rviz的集成使用，因为URDF与Rviz的集成较之于URDF与Gazebo的集成更为简单，后期，基于Rviz的集成实现，我们再进一步介绍URDF语法。</p>
<p><strong>需求描述:</strong></p>
<p>在 Rviz 中显示一个盒状机器人</p>
<p><strong>结果演示:</strong></p>
<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/image-20240615101040266.png"></p>
<p><strong>实现流程：</strong></p>
<ol>
<li>准备: 新建功能包，导入依赖</li>
<li>核心: 编写 urdf 文件</li>
<li>核心: 在 launch 文件集成 URDF 与 Rviz</li>
<li>在 Rviz 中显示机器人模型</li>
</ol>
<h2 id="1-创建功能包，导入依赖"><a href="#1-创建功能包，导入依赖" class="headerlink" title="1. 创建功能包，导入依赖"></a>1. 创建功能包，导入依赖</h2><p>创建一个新的功能包，名称自定义，导入依赖包:<code>urdf</code>与<code>xacro</code></p>
<p>在当前功能包下，再新建几个目录:</p>
<p><code>urdf</code>: 存储 urdf 文件的目录</p>
<p><code>meshes</code>:机器人模型渲染文件(暂不使用)</p>
<p><code>config</code>: 配置文件</p>
<p><code>launch</code>: 存储 launch 启动文件</p>
<h2 id="2-编写-URDF-文件"><a href="#2-编写-URDF-文件" class="headerlink" title="2. 编写 URDF 文件"></a>2. 编写 URDF 文件</h2><p>新建一个子级文件夹:<code>urdf</code>(可选，用于存放urdf文件；同时也可新建一个xacro文件夹，用于存放xacro的文件)，文件夹中添加一个<code>.urdf</code>文件,复制如下内容:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;mycar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.5 0.2 0.1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-在-launch-文件中集成-URDF-与-Rviz"><a href="#3-在-launch-文件中集成-URDF-与-Rviz" class="headerlink" title="3. 在 launch 文件中集成 URDF 与 Rviz"></a>3. 在 launch 文件中集成 URDF 与 Rviz</h2><p>在<code>launch</code>目录下，新建一个 launch 文件，该 launch 文件需要启动 Rviz，并导入 urdf 文件，Rviz 启动后可以自动载入解析<code>urdf</code>文件，并显示机器人模型，核心问题:如何导入 urdf 文件? 在 ROS 中，可以将 urdf 文件的路径设置到参数服务器，使用的参数名是:<code>robot_description</code>,示例代码如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">textfile</span>=<span class="string">&quot;$(find 包名)/urdf/urdf/urdf文件名.urdf&quot;</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- $(find 包名)从功能包位置开始，即相对地址--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动 rviz --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-在-Rviz-中显示机器人模型"><a href="#4-在-Rviz-中显示机器人模型" class="headerlink" title="4. 在 Rviz 中显示机器人模型"></a>4. 在 Rviz 中显示机器人模型</h2><p>rviz 启动后，会发现并没有盒装的机器人模型，这是因为默认情况下没有添加机器人显示组件，需要手动添加，添加方式如下:</p>
<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/01_URDF%E6%96%87%E4%BB%B6%E6%89%A7%E8%A1%8Crviz%E9%85%8D%E7%BD%AE01.png" alt="01_URDF文件执行rviz配置01"></p>
<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/02_URDF%E6%96%87%E4%BB%B6%E6%89%A7%E8%A1%8Crviz%E9%85%8D%E7%BD%AE02.png" alt="02_URDF文件执行rviz配置02"></p>
<p>设置完毕后，可以正常显示了</p>
<h2 id="5-优化-rviz-启动"><a href="#5-优化-rviz-启动" class="headerlink" title="5. 优化 rviz 启动"></a>5. 优化 rviz 启动</h2><p>重复启动<code>launch</code>文件时，Rviz 之前的组件配置信息不会自动保存，需要重复执行步骤4的操作，为了方便使用，可以使用如下方式优化:</p>
<p>首先，将当前配置保存进<code>config</code>目录</p>
<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/10_rviz%E9%85%8D%E7%BD%AE%E4%BF%9D%E5%AD%98.png" alt="10_rviz配置保存"></p>
<p>然后，<code>launch</code>文件中 Rviz 的启动配置添加参数:<code>args</code>,值设置为<code>-d 配置文件路径</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">textfile</span>=<span class="string">&quot;$(find 包名)/urdf/urdf/urdf01_HelloWorld.urdf&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(find 报名)/config/rviz/配置名.rviz&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再启动时，就可以包含之前的组件配置了，使用更方便快捷。</p>
<h1 id="6-3-URDF语法详解"><a href="#6-3-URDF语法详解" class="headerlink" title="6.3 URDF语法详解"></a>6.3 URDF语法详解</h1><p>URDF 文件是一个标准的 XML 文件，在 ROS 中预定义了一系列的标签用于描述机器人模型，机器人模型可能较为复杂，但是 ROS 的 URDF 中机器人的组成却是较为简单，可以主要简化为两部分:连杆(link标签) 与 关节(joint标签)，接下来我们就通过案例了解一下 URDF 中的不同标签:</p>
<ul>
<li>robot 根标签，类似于 launch文件中的launch标签</li>
<li>link 连杆标签</li>
<li>joint 关节标签</li>
<li>gazebo 集成gazebo需要使用的标签</li>
</ul>
<p>关于gazebo标签，后期在使用 gazebo 仿真时，才需要使用到，用于配置仿真环境所需参数，比如: 机器人材料属性、gazebo插件等，但是该标签不是机器人模型必须的，只有在仿真时才需设置</p>
<h2 id="6-3-1-URDF语法详解01-robot"><a href="#6-3-1-URDF语法详解01-robot" class="headerlink" title="6.3.1 URDF语法详解01_robot"></a>6.3.1 URDF语法详解01_robot</h2><p><strong>robot</strong></p>
<p>urdf 中为了保证 xml 语法的完整性，使用了<code>robot</code>标签作为根标签，所有的 link 和 joint 以及其他标签都必须包含在 robot 标签内,在该标签内可以通过 name 属性设置机器人模型的名称</p>
<p><strong>1.属性</strong></p>
<p>name: 指定机器人模型的名称</p>
<p><strong>2.子标签</strong></p>
<p>其他标签都是子级标签</p>
<h2 id="6-3-2-URDF语法详解02-link"><a href="#6-3-2-URDF语法详解02-link" class="headerlink" title="6.3.2 URDF语法详解02_link"></a>6.3.2 URDF语法详解02_link</h2><p><strong>link</strong></p>
<p>urdf 中的 link 标签用于描述机器人某个部件(也即刚体部分)的外观和物理属性，比如: 机器人底座、轮子、激光雷达、摄像头…每一个部件都对应一个 link, 在 link 标签内，可以设计该部件的形状、尺寸、颜色、惯性矩阵、碰撞参数等一系列属性</p>
<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/%E5%AE%98%E6%96%B901_link.png" alt="官方01_link"></p>
<p><strong>1.属性</strong></p>
<ul>
<li>name —&gt; 为连杆命名</li>
</ul>
<p><strong>2.子标签</strong></p>
<ul>
<li>visual —&gt; 描述外观(对应的数据是可视的)<ul>
<li>geometry 设置连杆的形状<ul>
<li>标签1: box(盒状)<ul>
<li>属性:size&#x3D;长(x) 宽(y) 高(z)</li>
</ul>
</li>
<li>标签2: cylinder(圆柱)<ul>
<li>属性:radius&#x3D;半径 length&#x3D;高度</li>
</ul>
</li>
<li>标签3: sphere(球体)<ul>
<li>属性:radius&#x3D;半径</li>
</ul>
</li>
<li>标签4: mesh(为连杆添加皮肤)<ul>
<li>属性: filename&#x3D;资源路径(格式:<strong>package:&#x2F;&#x2F;<packagename>&#x2F;<path></path>&#x2F;文件</packagename></strong>)</li>
</ul>
</li>
</ul>
</li>
<li>origin 设置偏移量与倾斜弧度<ul>
<li>属性1: xyz&#x3D;x偏移 y便宜 z偏移</li>
<li>属性2: rpy&#x3D;x翻滚 y俯仰 z偏航 (单位是弧度)</li>
</ul>
</li>
<li>metrial 设置材料属性(颜色)<ul>
<li>属性: name</li>
<li>标签: color<ul>
<li>属性: rgba&#x3D;红绿蓝权重值与透明度 (每个权重值以及透明度取值[0,1])</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>collision —&gt; 连杆的碰撞属性</li>
<li>Inertial —&gt; 连杆的惯性矩阵</li>
</ul>
<p>在此，只演示<code>visual</code>使用。</p>
<p><strong>3.案例</strong></p>
<p>**需求:**分别生成长方体、圆柱与球体的机器人部件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 形状 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 长方体的长宽高 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;box size=&quot;0.5 0.3 0.1&quot; /&gt; --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 圆柱，半径和长度 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;cylinder radius=&quot;0.5&quot; length=&quot;0.1&quot; /&gt; --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 球体，半径--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;sphere radius=&quot;0.3&quot; /&gt; --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 皮肤 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">&quot;package://simulate_01/meshes/autolabor_mini.stl&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- xyz坐标 rpy翻滚俯仰与偏航角度(3.14=180度 1.57=90度) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;1.57 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 颜色: r=red g=green b=blue a=alpha --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1 0 0 1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">textfile</span>=<span class="string">&quot;$(find simulate_01)/urdf/urdf/demo_02_geometry.urdf&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(find simulate_01)/config/demo_02_geometry.rviz&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/image-20240615103051560.png" alt="image-20240615103051560"></p>
<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/image-20240615111953516.png" alt="image-20240615111953516"></p>
<h2 id="6-3-3-URDF语法详解03-joint"><a href="#6-3-3-URDF语法详解03-joint" class="headerlink" title="6.3.3 URDF语法详解03_joint"></a>6.3.3 URDF语法详解03_joint</h2><p><strong>joint</strong></p>
<p>urdf 中的 joint 标签用于描述机器人关节的运动学和动力学属性，还可以指定关节运动的安全极限，机器人的两个部件(分别称之为 parent link 与 child link)以”关节”的形式相连接，不同的关节有不同的运动形式: 旋转、滑动、固定、旋转速度、旋转角度限制….,比如:安装在底座上的轮子可以360度旋转，而摄像头则可能是完全固定在底座上。</p>
<p>joint标签对应的数据在模型中是不可见的!</p>
<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/%E5%AE%98%E6%96%B902_link.png" alt="官方02_link"></p>
<h3 id="1-属性"><a href="#1-属性" class="headerlink" title="1.属性"></a>1.属性</h3><ul>
<li>name —&gt; 为关节命名</li>
<li>type —&gt; 关节运动形式<ul>
<li>continuous: 旋转关节，可以绕单轴无限旋转</li>
<li>revolute: 旋转关节，类似于 continues,但是有旋转角度限制</li>
<li>prismatic: 滑动关节，沿某一轴线移动的关节，有位置极限</li>
<li>planer: 平面关节，允许在平面正交方向上平移或旋转</li>
<li>floating: 浮动关节，允许进行平移、旋转运动</li>
<li>fixed: 固定关节，不允许运动的特殊关节</li>
</ul>
</li>
</ul>
<h3 id="2-子标签"><a href="#2-子标签" class="headerlink" title="2.子标签"></a>2.子标签</h3><ul>
<li><p>parent(必需的)</p>
<p>parent link的名字是一个强制的属性：</p>
<ul>
<li>link:父级连杆的名字，是这个link在机器人结构树中的名字。</li>
</ul>
</li>
<li><p>child(必需的)</p>
<p>child link的名字是一个强制的属性：</p>
<ul>
<li>link:子级连杆的名字，是这个link在机器人结构树中的名字。</li>
</ul>
</li>
<li><p>origin</p>
<ul>
<li>属性: xyz&#x3D;各轴线上的偏移量 rpy&#x3D;各轴线上的偏移弧度。</li>
</ul>
</li>
<li><p>axis</p>
<ul>
<li>属性: xyz用于设置围绕哪个关节轴运动。</li>
</ul>
</li>
</ul>
<h3 id="3-案例"><a href="#3-案例" class="headerlink" title="3.案例"></a>3.案例</h3><p><strong>需求：</strong>创建机器人模型，底盘为长方体，在长方体的前面添加一摄像头，摄像头可以沿着 Z 轴 360 度旋转。</p>
<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/image-20240615104724349.png" alt="image-20240615104724349"></p>
<p><strong>URDF文件示例如下:</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    需求: 创建机器人模型，底盘为长方体，</span></span><br><span class="line"><span class="comment">         在长方体的前面添加一摄像头，</span></span><br><span class="line"><span class="comment">         摄像头可以沿着 Z 轴 360 度旋转</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;mycar&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 底盘 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.5 0.2 0.1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;blue&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0 0 1.0 0.5&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 摄像头 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;camera&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.02 0.05 0.05&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1 0 0 0.5&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 关节 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;camera2baselink&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;camera&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 需要计算两个 link 的物理中心之间的偏移量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.2 0 0.075&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>launch文件示例如下:</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">textfile</span>=<span class="string">&quot;$(find urdf_rviz_demo)/urdf/urdf/urdf03_joint.urdf&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(find urdf_rviz_demo)/config/helloworld.rviz&quot;</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加关节状态发布节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加机器人状态发布节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可选:用于控制关节运动的节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PS:</p>
<p>1.状态发布节点在此是必须的:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加关节状态发布节点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加机器人状态发布节点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.关节运动控制节点(可选)，会生成关节控制的UI，用于测试关节运动是否正常。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 可选:用于控制关节运动的节点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-base-footpbrint优化urdf"><a href="#4-base-footpbrint优化urdf" class="headerlink" title="4.base_footpbrint优化urdf"></a>4.base_footpbrint优化urdf</h3><p>前面实现的机器人模型是半沉到地下的，因为默认情况下: 底盘的中心点位于地图原点上，所以会导致这种情况产生，可以使用的优化策略，将初始 link 设置为一个尺寸极小的 link(比如半径为 0.001m 的球体，或边长为 0.001m 的立方体)，然后再在初始 link 上添加底盘等刚体，这样实现，虽然仍然存在初始link半沉的现象，但是基本可以忽略了。这个初始 link 一般称之为 base_footprint</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    使用 base_footprint 优化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;mycar&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置一个原点(机器人中心点的投影) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_footprint&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;0.001&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加底盘 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.5 0.2 0.1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;blue&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0 0 1.0 0.5&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 底盘与原点连接的关节 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;base_link2base_footprint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_footprint&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0.05&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加摄像头 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;camera&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.02 0.05 0.05&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1 0 0 0.5&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 关节 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;camera2baselink&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;camera&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.2 0 0.075&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>launch 文件内容不变。</p>
<h3 id="5-遇到问题以及解决"><a href="#5-遇到问题以及解决" class="headerlink" title="5.遇到问题以及解决"></a>5.遇到问题以及解决</h3><p><strong>问题1:</strong></p>
<p>命令行输出如下错误提示</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">UnicodeEncodeError: <span class="string">&#x27;ascii&#x27;</span> codec can<span class="string">&#x27;t encode characters in position 463-464: ordinal not in range(128)</span></span><br><span class="line"><span class="string">[joint_state_publisher-3] process has died [pid 4443, exit code 1, cmd /opt/ros/melodic/lib/joint_state_publisher/joint_state_publisher __name:=joint_state_publisher __log:=/home/rosmelodic/.ros/log/b38967c0-0acb-11eb-aee3-0800278ee10c/joint_state_publisher-3.log].</span></span><br><span class="line"><span class="string">log file: /home/rosmelodic/.ros/log/b38967c0-0acb-11eb-aee3-0800278ee10c/joint_state_publisher-3*.log</span></span><br></pre></td></tr></table></figure>

<p>rviz中提示坐标变换异常，导致机器人部件显示结构异常</p>
<p>**原因:**编码问题导致的</p>
<p>**解决:**去除URDF中的中文注释</p>
<p><strong>问题2:</strong>[ERROR] [1584370263.037038]: Could not find the GUI, install the ‘joint_state_publisher_gui’ package</p>
<p><strong>解决:<code>sudo apt install ros-noetic-joint-state-publisher-gui</code></strong></p>
<h2 id="6-3-4-URDF练习——四轮小车"><a href="#6-3-4-URDF练习——四轮小车" class="headerlink" title="6.3.4 URDF练习——四轮小车"></a>6.3.4 URDF练习——四轮小车</h2><p><strong>需求描述:</strong></p>
<p>创建一个四轮圆柱状机器人模型，机器人参数如下,底盘为圆柱状，半径 10cm，高 8cm，四轮由两个驱动轮和两个万向支撑轮组成，两个驱动轮半径为 3.25cm,轮胎宽度1.5cm，两个万向轮为球状，半径 0.75cm，底盘离地间距为 1.5cm(与万向轮直径一致)</p>
<p><strong>结果演示:</strong></p>
<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/URDF_test.png" alt="URDF_test"></p>
<p><strong>实现流程:</strong></p>
<p>创建机器人模型可以分步骤实现</p>
<ol>
<li>新建 urdf 文件，并与 launch 文件集成</li>
<li>搭建底盘</li>
<li>在底盘上添加两个驱动轮</li>
<li>在底盘上添加两个万向轮</li>
</ol>
<h3 id="1-新建urdf以及launch文件"><a href="#1-新建urdf以及launch文件" class="headerlink" title="1.新建urdf以及launch文件"></a>1.新建urdf以及launch文件</h3><p>urdf 文件:基本实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;mycar&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置 base_footprint  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_footprint&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;0.001&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加底盘 --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加驱动轮 --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加万向轮(支撑轮) --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>launch 文件:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将 urdf 文件内容设置进参数服务器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">textfile</span>=<span class="string">&quot;$(find demo01_urdf_helloworld)/urdf/urdf/test.urdf&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动 rivz --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz_test&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(find demo01_urdf_helloworld)/config/helloworld.rviz&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动机器人状态和关节状态发布节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动图形化的控制关节运动节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-底盘搭建"><a href="#2-底盘搭建" class="headerlink" title="2.底盘搭建"></a>2.底盘搭建</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        参数</span></span><br><span class="line"><span class="comment">            形状:圆柱 </span></span><br><span class="line"><span class="comment">            半径:10     cm </span></span><br><span class="line"><span class="comment">            高度:8      cm </span></span><br><span class="line"><span class="comment">            离地:1.5    cm</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;0.1&quot;</span> <span class="attr">length</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.8 0.3 0.1 0.5&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;base_link2base_footprint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_footprint&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0.055&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-添加驱动轮"><a href="#3-添加驱动轮" class="headerlink" title="3.添加驱动轮"></a>3.添加驱动轮</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加驱动轮 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        驱动轮是侧翻的圆柱</span></span><br><span class="line"><span class="comment">        参数</span></span><br><span class="line"><span class="comment">            半径: 3.25 cm</span></span><br><span class="line"><span class="comment">            宽度: 1.5  cm</span></span><br><span class="line"><span class="comment">            颜色: 黑色</span></span><br><span class="line"><span class="comment">        关节设置:</span></span><br><span class="line"><span class="comment">            x = 0</span></span><br><span class="line"><span class="comment">            y = 底盘的半径 + 轮胎宽度 / 2</span></span><br><span class="line"><span class="comment">            z = 离地间距 + 底盘长度 / 2 - 轮胎半径 = 1.5 + 4 - 3.25 = 2.25(cm)</span></span><br><span class="line"><span class="comment">            axis = 0 1 0</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;left_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;0.0325&quot;</span> <span class="attr">length</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;1.5705 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;left_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;left_wheel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0.1 -0.0225&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;right_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;0.0325&quot;</span> <span class="attr">length</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;1.5705 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;right_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;right_wheel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 -0.1 -0.0225&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-添加万向轮"><a href="#4-添加万向轮" class="headerlink" title="4.添加万向轮"></a>4.添加万向轮</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加万向轮(支撑轮) --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        参数</span></span><br><span class="line"><span class="comment">            形状: 球体</span></span><br><span class="line"><span class="comment">            半径: 0.75 cm</span></span><br><span class="line"><span class="comment">            颜色: 黑色</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        关节设置:</span></span><br><span class="line"><span class="comment">            x = 自定义(底盘半径 - 万向轮半径) = 0.1 - 0.0075 = 0.0925(cm)</span></span><br><span class="line"><span class="comment">            y = 0</span></span><br><span class="line"><span class="comment">            z = 底盘长度 / 2 + 离地间距 / 2 = 0.08 / 2 + 0.015 / 2 = 0.0475 </span></span><br><span class="line"><span class="comment">            axis= 1 1 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;front_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;0.0075&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;front_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;front_wheel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0925 0 -0.0475&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;1 1 1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;back_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;0.0075&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;back_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;back_wheel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;-0.0925 0 -0.0475&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;1 1 1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-3-5-URDF工具"><a href="#6-3-5-URDF工具" class="headerlink" title="6.3.5 URDF工具"></a>6.3.5 URDF工具</h2><p>在 ROS 中，提供了一些工具来方便 URDF 文件的编写，比如:</p>
<ul>
<li><code>check_urdf</code>命令可以检查复杂的 urdf 文件是否存在语法问题</li>
<li><code>urdf_to_graphiz</code>命令可以查看 urdf 模型结构，显示不同 link 的层级关系</li>
</ul>
<p>当然，要使用工具之前，首先需要安装，安装命令:<code>sudo apt install liburdfdom-tools</code></p>
<h3 id="1-check-urdf-语法检查"><a href="#1-check-urdf-语法检查" class="headerlink" title="1.check_urdf 语法检查"></a>1.check_urdf 语法检查</h3><p>进入urdf文件所属目录，调用:<code>check_urdf urdf文件</code>，如果不抛出异常，说明文件合法,否则非法</p>
<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/03_URDF%E6%96%87%E4%BB%B6%E6%A3%80%E6%9F%A5_%E6%AD%A3%E5%B8%B8.png" alt="03_URDF文件检查_正常"></p>
<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/04_URDF%E6%96%87%E4%BB%B6%E6%A3%80%E6%9F%A5_%E5%BC%82%E5%B8%B8.png" alt="04_URDF文件检查_异常"></p>
<h3 id="2-urdf-to-graphiz-结构查看"><a href="#2-urdf-to-graphiz-结构查看" class="headerlink" title="2.urdf_to_graphiz 结构查看"></a>2.urdf_to_graphiz 结构查看</h3><p>进入urdf文件所属目录，调用:<code>urdf_to_graphiz urdf文件</code>，当前目录下会生成 pdf 文件</p>
<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/05_%E6%9F%A5%E7%9C%8BURDF%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9E%8B%E7%BB%93%E6%9E%84.png" alt="05_查看URDF文件模型结构"></p>
<h1 id="6-4-URDF优化-xacro"><a href="#6-4-URDF优化-xacro" class="headerlink" title="6.4 URDF优化_xacro"></a>6.4 URDF优化_xacro</h1><p>前面 URDF 文件构建机器人模型的过程中，存在若干问题。</p>
<blockquote>
<p>问题1:在设计关节的位置时，需要按照一定的公式计算，公式是固定的，但是在 URDF 中依赖于人工计算，存在不便，容易计算失误，且当某些参数发生改变时，还需要重新计算。</p>
<p>问题2:URDF 中的部分内容是高度重复的，驱动轮与支撑轮的设计实现，不同轮子只是部分参数不同，形状、颜色、翻转量都是一致的，在实际应用中，构建复杂的机器人模型时，更是易于出现高度重复的设计，按照一般的编程涉及到重复代码应该考虑封装。</p>
<p>……</p>
</blockquote>
<p>如果在编程语言中，可以通过变量结合函数直接解决上述问题，在 ROS 中，已经给出了类似编程的优化方案，称之为:<strong>Xacro</strong></p>
<hr>
<p><strong>概念</strong></p>
<p>Xacro 是 XML Macros 的缩写，Xacro 是一种 XML 宏语言，是可编程的 XML。</p>
<p><strong>原理</strong></p>
<p>Xacro 可以声明变量，可以通过数学运算求解，使用流程控制控制执行顺序，还可以通过类似函数的实现，封装固定的逻辑，将逻辑中需要的可变的数据以参数的方式暴露出去，从而提高代码复用率以及程序的安全性。</p>
<p><strong>作用</strong></p>
<p>较之于纯粹的 URDF 实现，可以编写更安全、精简、易读性更强的机器人模型文件，且可以提高编写效率。</p>
<h2 id="6-4-1-Xacro-快速体验"><a href="#6-4-1-Xacro-快速体验" class="headerlink" title="6.4.1 Xacro_快速体验"></a>6.4.1 Xacro_快速体验</h2><p>**目的:**简单了解 xacro 的基本语法。</p>
<p><strong>需求描述:</strong></p>
<p>使用xacro优化上一节案例中驱动轮实现，需要使用变量封装底盘的半径、高度，使用数学公式动态计算底盘的关节点坐标，使用 Xacro 宏封装轮子重复的代码并调用宏创建两个轮子(注意: 在此，演示 Xacro 的基本使用，不必要生成合法的 URDF )。</p>
<p><strong>准备:</strong></p>
<p>创建功能包，导入 urdf 与 xacro。</p>
<h3 id="1-Xacro文件编写"><a href="#1-Xacro文件编写" class="headerlink" title="1.Xacro文件编写"></a>1.Xacro文件编写</h3><p>编写 Xacro 文件，以变量的方式封装属性(常量半径、高度、车轮半径…)，以函数的方式封装重复实现(车轮的添加)。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;mycar&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 属性封装 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wheel_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0325&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wheel_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0015&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;PI&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3.1415927&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_link_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;lidi_space&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 宏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;wheel_func&quot;</span> <span class="attr">params</span>=<span class="string">&quot;wheel_name flag&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;wheel_name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;wheel_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;wheel_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;$&#123;PI / 2&#125; 0 0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;wheel_color&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0 0 0 0.3&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 3-2.joint --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;wheel_name&#125;2link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;$&#123;wheel_name&#125;_wheel&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">                x 无偏移</span></span><br><span class="line"><span class="comment">                y 车体半径</span></span><br><span class="line"><span class="comment">                z z= 车体高度 / 2 + 离地间距 - 车轮半径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 $&#123;0.1 * flag&#125; $&#123;(base_link_length / 2 + lidi_space - wheel_radius) * -1&#125;&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:wheel_func</span> <span class="attr">wheel_name</span>=<span class="string">&quot;left&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:wheel_func</span> <span class="attr">wheel_name</span>=<span class="string">&quot;right&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;-1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Xacro文件转换成-urdf-文件"><a href="#2-Xacro文件转换成-urdf-文件" class="headerlink" title="2.Xacro文件转换成 urdf 文件"></a>2.Xacro文件转换成 urdf 文件</h3><p>命令行进入 xacro文件 所属目录，执行:<code>rosrun xacro xacro xxx.xacro &gt; xxx.urdf</code>, 会将 xacro 文件解析为 urdf 文件，内容如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- =================================================================================== --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- |    This document was autogenerated by xacro from test.xacro                     | --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- =================================================================================== --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;mycar&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;left_wheel&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">length</span>=<span class="string">&quot;0.0015&quot;</span> <span class="attr">radius</span>=<span class="string">&quot;0.0325&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">&quot;1.57079635 0 0&quot;</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;wheel_color&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0 0 0 0.3&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 3-2.joint --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;left2link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;left_wheel&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">                x 无偏移</span></span><br><span class="line"><span class="comment">                y 车体半径</span></span><br><span class="line"><span class="comment">                z z= 车体高度 / 2 + 离地间距 - 车轮半径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0.1 -0.0225&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;right_wheel&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">length</span>=<span class="string">&quot;0.0015&quot;</span> <span class="attr">radius</span>=<span class="string">&quot;0.0325&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">&quot;1.57079635 0 0&quot;</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;wheel_color&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0 0 0 0.3&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 3-2.joint --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;right2link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;right_wheel&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">                x 无偏移</span></span><br><span class="line"><span class="comment">                y 车体半径</span></span><br><span class="line"><span class="comment">                z z= 车体高度 / 2 + 离地间距 - 车轮半径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">xyz</span>=<span class="string">&quot;0 -0.1 -0.0225&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意: 该案例编写生成的是非法的 URDF 文件，目的在于演示 Xacro 的极简使用以及优点。</p>
<h2 id="6-4-2-Xacro-语法详解"><a href="#6-4-2-Xacro-语法详解" class="headerlink" title="6.4.2 Xacro_语法详解"></a>6.4.2 Xacro_语法详解</h2><p>xacro 提供了可编程接口，类似于计算机语言，包括变量声明调用、函数声明与调用等语法实现。在使用 xacro 生成 urdf 时，根标签<code>robot</code>中必须包含命名空间声明:<code>xmlns:xacro=&quot;http://wiki.ros.org/xacro&quot;</code></p>
<p><strong>1. 属性与算数运算</strong></p>
<p>用于封装 URDF 中的一些字段，比如: PAI 值，小车的尺寸，轮子半径 ….</p>
<p><strong>属性定义</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;xxxx&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yyyy&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>属性调用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;属性名称&#125;</span><br></pre></td></tr></table></figure>

<p><strong>算数运算</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;数学表达式&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. 宏</strong></p>
<p>类似于函数实现，提高代码复用率，优化代码结构，提高安全性</p>
<p><strong>宏定义</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;宏名称&quot;</span> <span class="attr">params</span>=<span class="string">&quot;参数列表(多参数之间使用空格分隔)&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    参数调用格式: $&#123;参数名&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>宏调用</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:宏名称</span> <span class="attr">参数1</span>=<span class="string">xxx</span> <span class="attr">参数2</span>=<span class="string">xxx/</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 文件包含</strong></p>
<p>机器人由多部件组成，不同部件可能封装为单独的 xacro 文件，最后再将不同的文件集成，组合为完整机器人，可以使用文件包含实现</p>
<p><strong>文件包含</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;my_base.xacro&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;my_camera.xacro&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;my_laser.xacro&quot;</span> /&gt;</span></span><br><span class="line">      ....</span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-4-3-Xacro-完整使用流程示例"><a href="#6-4-3-Xacro-完整使用流程示例" class="headerlink" title="6.4.3 Xacro_完整使用流程示例"></a>6.4.3 Xacro_完整使用流程示例</h2><p><strong>需求描述:</strong></p>
<p>使用 Xacro 优化 URDF 版的小车底盘模型实现</p>
<p><strong>结果演示:</strong></p>
<p>![URDF_test (1)](.&#x2F;6-机器人系统仿真&#x2F;URDF_test (1).png)</p>
<h3 id="1-编写-Xacro-文件"><a href="#1-编写-Xacro-文件" class="headerlink" title="1.编写 Xacro 文件"></a>1.编写 Xacro 文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    使用 xacro 优化 URDF 版的小车底盘实现：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现思路:</span></span><br><span class="line"><span class="comment">    1.将一些常量、变量封装为 xacro:property</span></span><br><span class="line"><span class="comment">      比如:PI 值、小车底盘半径、离地间距、车轮半径、宽度 ....</span></span><br><span class="line"><span class="comment">    2.使用 宏 封装驱动轮以及支撑轮实现，调用相关宏生成驱动轮与支撑轮</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根标签，必须声明 xmlns:xacro --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_base&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 封装变量、常量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;PI&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3.141&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 宏:黑色设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 底盘属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_footprint_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.001&quot;</span> /&gt;</span> <span class="comment">&lt;!-- base_footprint 半径  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_link_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span> /&gt;</span> <span class="comment">&lt;!-- base_link 半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_link_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span> <span class="comment">&lt;!-- base_link 长 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;earth_space&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 离地间距 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 底盘 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_footprint&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;base_footprint_radius&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;base_link_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;base_link_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.5 0.3 0.0 0.5&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;base_link2base_footprint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_footprint&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 $&#123;earth_space + base_link_length / 2 &#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 驱动轮 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 驱动轮属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wheel_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0325&quot;</span> /&gt;</span><span class="comment">&lt;!-- 半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wheel_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span><span class="comment">&lt;!-- 宽度 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 驱动轮宏实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;add_wheels&quot;</span> <span class="attr">params</span>=<span class="string">&quot;name flag&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;wheel_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;wheel_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;$&#123;PI / 2&#125; 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 $&#123;flag * base_link_radius&#125; $&#123;-(earth_space + base_link_length / 2 - wheel_radius) &#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_wheels</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_wheels</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;-1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支撑轮 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支撑轮属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_wheel_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0075&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支撑轮半径 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 支撑轮宏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;add_support_wheel&quot;</span> <span class="attr">params</span>=<span class="string">&quot;name flag&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;support_wheel_radius&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;flag * (base_link_radius - support_wheel_radius)&#125; 0 $&#123;-(base_link_length / 2 + earth_space / 2)&#125;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;1 1 1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_support_wheel</span> <span class="attr">name</span>=<span class="string">&quot;front&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_support_wheel</span> <span class="attr">name</span>=<span class="string">&quot;back&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;-1&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-集成launch文件"><a href="#2-集成launch文件" class="headerlink" title="2.集成launch文件"></a>2.集成launch文件</h3><p>**方式1:**先将 xacro 文件转换出 urdf 文件，然后集成</p>
<p>先将 xacro 文件解析成 urdf 文件:<code>rosrun xacro xacro xxx.xacro &gt; xxx.urdf</code>然后再按照之前的集成方式直接整合 launch 文件,内容示例:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">textfile</span>=<span class="string">&quot;$(find demo01_urdf_helloworld)/urdf/xacro/my_base.urdf&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(find demo01_urdf_helloworld)/config/helloworld.rviz&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>**方式2:**在 launch 文件中直接加载 xacro(<strong>建议使用</strong>)</p>
<p>launch 内容示例:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro $(find demo01_urdf_helloworld)/urdf/xacro/my_base.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(find demo01_urdf_helloworld)/config/helloworld.rviz&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>核心代码:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro $(find demo01_urdf_helloworld)/urdf/xacro/my_base.urdf.xacro&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>加载<code>robot_description</code>时使用<code>command</code>属性，属性值就是调用 xacro 功能包的 xacro 程序直接解析 xacro 文件。</p>
<h2 id="6-4-4-Xacro-实操"><a href="#6-4-4-Xacro-实操" class="headerlink" title="6.4.4 Xacro_实操"></a>6.4.4 Xacro_实操</h2><p><strong>需求描述:</strong></p>
<p>在前面小车底盘基础之上，添加摄像头和雷达传感器。</p>
<p><strong>结果演示:</strong></p>
<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/17_xacro%E6%A1%88%E4%BE%8B.png" alt="17_xacro案例"></p>
<p><strong>实现分析:</strong></p>
<p>机器人模型由多部件组成，可以将不同组件设置进单独文件，最终通过文件包含实现组件的拼装。</p>
<p><strong>实现流程:</strong></p>
<ol>
<li>首先编写摄像头和雷达的 xacro 文件</li>
<li>然后再编写一个组合文件，组合底盘、摄像头与雷达</li>
<li>最后，通过 launch 文件启动 Rviz 并显示模型</li>
</ol>
<h3 id="1-摄像头和雷达-Xacro-文件实现"><a href="#1-摄像头和雷达-Xacro-文件实现" class="headerlink" title="1.摄像头和雷达 Xacro 文件实现"></a>1.摄像头和雷达 Xacro 文件实现</h3><p>摄像头 xacro 文件:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 摄像头相关的 xacro 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_camera&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 摄像头属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头长度(x) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_width&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.025&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头宽度(y) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_height&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.025&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头高度(z) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_x&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头安装的x坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_y&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头安装的y坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_z&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;base_link_length / 2 + camera_height / 2&#125;&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头安装的z坐标:底盘高度 / 2 + 摄像头高度 / 2  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 摄像头关节以及link --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;camera&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;$&#123;camera_length&#125; $&#123;camera_width&#125; $&#123;camera_height&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;camera2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;camera&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;camera_x&#125; $&#123;camera_y&#125; $&#123;camera_z&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>雷达 xacro 文件:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    小车底盘添加雷达</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_laser&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 雷达支架 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.15&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支架长度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支架半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_x&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支架安装的x坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_y&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支架安装的y坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_z&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;base_link_length / 2 + support_length / 2&#125;&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支架安装的z坐标:底盘高度 / 2 + 支架高度 / 2  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;support&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;support_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;support_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.8 0.2 0.0 0.8&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;support2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;support&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;support_x&#125; $&#123;support_y&#125; $&#123;support_z&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 雷达属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;laser_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 雷达长度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;laser_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.03&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 雷达半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;laser_x&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 雷达安装的x坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;laser_y&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 雷达安装的y坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;laser_z&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;support_length / 2 + laser_length / 2&#125;&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 雷达安装的z坐标:支架高度 / 2 + 雷达高度 / 2  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 雷达关节以及link --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;laser&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;laser_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;laser_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;laser2support&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;support&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;laser&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;laser_x&#125; $&#123;laser_y&#125; $&#123;laser_z&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-组合底盘摄像头与雷达的-xacro-文件"><a href="#2-组合底盘摄像头与雷达的-xacro-文件" class="headerlink" title="2.组合底盘摄像头与雷达的 xacro 文件"></a>2.组合底盘摄像头与雷达的 xacro 文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组合小车底盘与摄像头与雷达 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_car_camera&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;my_base.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;my_camera.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;my_laser.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-launch-文件"><a href="#3-launch-文件" class="headerlink" title="3.launch 文件"></a>3.launch 文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro $(find demo01_urdf_helloworld)/urdf/xacro/my_base_camera_laser.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(find demo01_urdf_helloworld)/config/helloworld.rviz&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="6-5-Rviz中控制机器人模型运动"><a href="#6-5-Rviz中控制机器人模型运动" class="headerlink" title="6.5 Rviz中控制机器人模型运动"></a>6.5 Rviz中控制机器人模型运动</h1><p>通过 URDF 结合 rviz 可以创建并显示机器人模型，不过，当前实现的只是静态模型，如何控制模型的运动呢？在此，可以调用 Arbotix 实现此功能。</p>
<hr>
<p><strong>简介</strong></p>
<p><strong>Arbotix:<strong>Arbotix 是一款控制电机、舵机的控制板，</strong>并提供相应的 ros 功能包</strong>，这个功能包的功能不仅可以驱动真实的 Arbotix 控制板，它还提供一个差速控制器，通过接受速度控制指令更新机器人的 joint 状态，从而帮助我们实现机器人在 rviz 中的运动。</p>
<p>这个差速控制器在 arbotix_python 程序包中，完整的 arbotix 程序包还包括多种控制器，分别对应 dynamixel 电机、多关节机械臂以及不同形状的夹持器。</p>
<p>接下来，通过一个案例演示 arbotix 的使用。</p>
<p><strong>需求描述:</strong></p>
<p>控制机器人模型在 rviz 中做圆周运动</p>
<p><strong>结果演示:</strong></p>
<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/arbotix%E8%BF%90%E5%8A%A8%E6%8E%A7%E5%88%B6.gif" alt="arbotix运动控制"></p>
<p><strong>实现流程:</strong></p>
<ol>
<li>安装 Arbotix</li>
<li>创建新功能包，准备机器人 urdf、xacro 文件</li>
<li>添加 Arbotix 配置文件</li>
<li>编写 launch 文件配置 Arbotix</li>
<li>启动 launch 文件并控制机器人模型运动</li>
</ol>
<h3 id="1-安装-Arbotix"><a href="#1-安装-Arbotix" class="headerlink" title="1.安装 Arbotix"></a>1.安装 Arbotix</h3><p>**方式1:**命令行调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-&lt;&lt;VersionName()&gt;&gt;-arbotix</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure>

<p>将 &lt;&lt;VsersionName()&gt;&gt; 替换成当前 ROS 版本名称，如果提示功能包无法定位，请采用方式2。</p>
<p>**方式2:**源码安装</p>
<p>先从 github 下载源码，然后调用 catkin_make 编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/vanadiumlabs/arbotix_ros.git</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure>

<h3 id="2-创建新功能包，准备机器人-urdf、xacro"><a href="#2-创建新功能包，准备机器人-urdf、xacro" class="headerlink" title="2.创建新功能包，准备机器人 urdf、xacro"></a>2.创建新功能包，准备机器人 urdf、xacro</h3><p>urdf 和 xacro 调用上一讲实现即可</p>
<h3 id="3-添加-arbotix-所需的配置文件"><a href="#3-添加-arbotix-所需的配置文件" class="headerlink" title="3.添加 arbotix 所需的配置文件"></a>3.添加 arbotix 所需的配置文件</h3><p><strong>添加 arbotix 所需配置文件</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 该文件是控制器配置,一个机器人模型可能有多个控制器，比如: 底盘、机械臂、夹持器(机械手)....</span></span><br><span class="line"><span class="comment"># 因此，根 name 是 controller</span></span><br><span class="line"><span class="attr">controllers:</span> &#123;</span><br><span class="line">   <span class="comment"># 单控制器设置</span></span><br><span class="line">   <span class="attr">base_controller:</span> &#123;</span><br><span class="line">          <span class="comment">#类型: 差速控制器</span></span><br><span class="line">       <span class="attr">type:</span> <span class="string">diff_controller</span>,</span><br><span class="line">       <span class="comment">#参考坐标</span></span><br><span class="line">       <span class="attr">base_frame_id:</span> <span class="string">base_footprint</span>, </span><br><span class="line">       <span class="comment">#两个轮子之间的间距</span></span><br><span class="line">       <span class="attr">base_width:</span> <span class="number">0.2</span>,</span><br><span class="line">       <span class="comment">#控制频率</span></span><br><span class="line">       <span class="attr">ticks_meter:</span> <span class="number">2000</span>, </span><br><span class="line">       <span class="comment">#PID控制参数，使机器人车轮快速达到预期速度</span></span><br><span class="line">       <span class="attr">Kp:</span> <span class="number">12</span>, </span><br><span class="line">       <span class="attr">Kd:</span> <span class="number">12</span>, </span><br><span class="line">       <span class="attr">Ki:</span> <span class="number">0</span>, </span><br><span class="line">       <span class="attr">Ko:</span> <span class="number">50</span>, </span><br><span class="line">       <span class="comment">#加速限制</span></span><br><span class="line">       <span class="attr">accel_limit:</span> <span class="number">1.0</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">Copy</span></span><br></pre></td></tr></table></figure>

<p><strong>另请参考:</strong> <a href="http://wiki.ros.org/arbotix_python/diff_controller">http://wiki.ros.org/arbotix_python/diff_controller</a></p>
<h3 id="4-launch-文件中配置-arbotix-节点"><a href="#4-launch-文件中配置-arbotix-节点" class="headerlink" title="4.launch 文件中配置 arbotix 节点"></a>4.launch 文件中配置 arbotix 节点</h3><p><strong>launch 示例代码</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;arbotix&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;arbotix_python&quot;</span> <span class="attr">type</span>=<span class="string">&quot;arbotix_driver&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find my_urdf05_rviz)/config/hello.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;sim&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure>

<p>代码解释:</p>
<p><node> 调用了 arbotix_python 功能包下的 arbotix_driver 节点</node></p>
<p><rosparam> arbotix 驱动机器人运行时，需要获取机器人信息，可以通过 file 加载配置文件</rosparam></p>
<param> 在仿真环境下，需要配置 sim 为 true

<h3 id="5-启动-launch-文件并控制机器人模型运动"><a href="#5-启动-launch-文件并控制机器人模型运动" class="headerlink" title="5.启动 launch 文件并控制机器人模型运动"></a>5.启动 launch 文件并控制机器人模型运动</h3><p>**启动launch:**roslaunch xxxx ….launch</p>
<p><strong>配置 rviz:</strong></p>
<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/06_arbotix%E5%AE%9E%E7%8E%B001.png" alt="06_arbotix实现01"></p>
<p><strong>控制小车运动:</strong></p>
<p>此时调用 rostopic list 会发现一个熟悉的话题: &#x2F;cmd_vel</p>
<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/07_arbotix%E5%AE%9E%E7%8E%B002.png" alt="07_arbotix实现02"></p>
<p>也就说我们可以发布 cmd_vel 话题消息控制小陈运动了，该实现策略有多种，可以另行编写节点，或者更简单些可以直接通过如下命令发布消息:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rostopic pub -r 10 /cmd_vel geometry_msgs/Twist &#x27;&#123;linear: &#123;x: 0.2, y: 0, z: 0&#125;, angular: &#123;x: 0, y: 0, z: 0.5&#125;&#125;&#x27;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure>

<p>现在，小车就可以运动起来了。</p>
<h1 id="6-6-URDF集成Gazebo"><a href="#6-6-URDF集成Gazebo" class="headerlink" title="6.6 URDF集成Gazebo"></a>6.6 URDF集成Gazebo</h1><p>URDF 需要集成进 Rviz 或 Gazebo 才能显示可视化的机器人模型，前面已经介绍了URDF 与 Rviz 的集成，本节主要介绍:</p>
<ul>
<li>URDF 与 Gazebo 的基本集成流程；</li>
<li>如果要在 Gazebo 中显示机器人模型，URDF 需要做的一些额外配置；</li>
<li>关于Gazebo仿真环境的搭建。</li>
</ul>
<h2 id="6-6-1-URDF与Gazebo基本集成流程"><a href="#6-6-1-URDF与Gazebo基本集成流程" class="headerlink" title="6.6.1 URDF与Gazebo基本集成流程"></a>6.6.1 URDF与Gazebo基本集成流程</h2><p>URDF 与 Gazebo 集成流程与 Rviz 实现类似，主要步骤如下:</p>
<ol>
<li>创建功能包，导入依赖项</li>
<li>编写 URDF 或 Xacro 文件</li>
<li>启动 Gazebo 并显示机器人模型</li>
</ol>
<h3 id="1-创建功能包"><a href="#1-创建功能包" class="headerlink" title="1.创建功能包"></a>1.创建功能包</h3><p>创建新功能包，导入依赖包: urdf、xacro、gazebo_ros、gazebo_ros_control、gazebo_plugins</p>
<h3 id="2-编写URDF文件"><a href="#2-编写URDF文件" class="headerlink" title="2.编写URDF文件"></a>2.编写URDF文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    创建一个机器人模型(盒状即可)，显示在 Gazebo 中 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;mycar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.5 0.2 0.1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.5 0.3 0.0 1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.5 0.2 0.1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;6&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;1&quot;</span> <span class="attr">ixy</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ixz</span>=<span class="string">&quot;0&quot;</span> <span class="attr">iyy</span>=<span class="string">&quot;1&quot;</span> <span class="attr">iyz</span>=<span class="string">&quot;0&quot;</span> <span class="attr">izz</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Black<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意， 当 URDF 需要与 Gazebo 集成时，和 Rviz 有明显区别:</p>
<p>1.必须使用 collision 标签，因为既然是仿真环境，那么必然涉及到碰撞检测，collision 提供碰撞检测的依据。</p>
<p>2.必须使用 inertial 标签，此标签标注了当前机器人某个刚体部分的惯性矩阵，用于一些力学相关的仿真计算。</p>
<p>3.颜色设置，也需要重新使用 gazebo 标签标注，因为之前的颜色设置为了方便调试包含透明度，仿真环境下没有此选项。</p>
<h3 id="3-启动Gazebo并显示模型"><a href="#3-启动Gazebo并显示模型" class="headerlink" title="3.启动Gazebo并显示模型"></a>3.启动Gazebo并显示模型</h3><p>launch 文件实现:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将 Urdf 文件的内容加载到参数服务器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">textfile</span>=<span class="string">&quot;$(find demo02_urdf_gazebo)/urdf/urdf01_helloworld.urdf&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动 gazebo --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find gazebo_ros)/launch/empty_world.launch&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在 gazebo 中显示机器人模型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;gazebo_ros&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawn_model&quot;</span> <span class="attr">name</span>=<span class="string">&quot;model&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-urdf -model mycar -param robot_description&quot;</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码解释:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find gazebo_ros)/launch/empty_world.launch&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 启动 Gazebo 的仿真环境，当前环境为空环境 --&gt;</span></span><br><span class="line">Copy</span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;gazebo_ros&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawn_model&quot;</span> <span class="attr">name</span>=<span class="string">&quot;model&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-urdf -model mycar -param robot_description&quot;</span>  /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    在 Gazebo 中加载一个机器人模型，该功能由 gazebo_ros 下的 spawn_model 提供:</span></span><br><span class="line"><span class="comment">    -urdf 加载的是 urdf 文件</span></span><br><span class="line"><span class="comment">    -model mycar 模型名称是 mycar</span></span><br><span class="line"><span class="comment">    -param robot_description 从参数 robot_description 中载入模型</span></span><br><span class="line"><span class="comment">    -x 模型载入的 x 坐标</span></span><br><span class="line"><span class="comment">    -y 模型载入的 y 坐标</span></span><br><span class="line"><span class="comment">    -z 模型载入的 z 坐标</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-6-2-UR2DF集成Gazebo相关设置"><a href="#6-6-2-UR2DF集成Gazebo相关设置" class="headerlink" title="6.6.2 UR2DF集成Gazebo相关设置"></a>6.6.2 UR2DF集成Gazebo相关设置</h2><p>较之于 rviz，gazebo在集成 URDF 时，需要做些许修改，比如:必须添加 collision 碰撞属性相关参数、必须添加 inertial 惯性矩阵相关参数，另外，如果直接移植 Rviz 中机器人的颜色设置是没有显示的，颜色设置也必须做相应的变更。</p>
<h3 id="1-collision"><a href="#1-collision" class="headerlink" title="1.collision"></a>1.collision</h3><p>如果机器人link是标准的几何体形状，和link的 visual 属性设置一致即可。</p>
<h3 id="2-inertial"><a href="#2-inertial" class="headerlink" title="2.inertial"></a>2.inertial</h3><p>惯性矩阵的设置需要结合link的质量与外形参数动态生成，标准的球体、圆柱与立方体的惯性矩阵公式如下(已经封装为 xacro 实现):</p>
<p>球体惯性矩阵</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Macro for inertia matrix --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;sphere_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m r&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> <span class="attr">ixy</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ixz</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">iyy</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> <span class="attr">iyz</span>=<span class="string">&quot;0&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">izz</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>圆柱惯性矩阵</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;cylinder_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m r h&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;m*(3*r*r+h*h)/12&#125;&quot;</span> <span class="attr">ixy</span> = <span class="string">&quot;0&quot;</span> <span class="attr">ixz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">iyy</span>=<span class="string">&quot;$&#123;m*(3*r*r+h*h)/12&#125;&quot;</span> <span class="attr">iyz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">izz</span>=<span class="string">&quot;$&#123;m*r*r/2&#125;&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>立方体惯性矩阵</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;Box_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m l w h&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;m*(h*h + l*l)/12&#125;&quot;</span> <span class="attr">ixy</span> = <span class="string">&quot;0&quot;</span> <span class="attr">ixz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">            	<span class="attr">iyy</span>=<span class="string">&quot;$&#123;m*(w*w + l*l)/12&#125;&quot;</span> <span class="attr">iyz</span>= <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">izz</span>=<span class="string">&quot;$&#123;m*(w*w + h*h)/12&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，原则上，除了 base_footprint 外，机器人的每个刚体部分都需要设置惯性矩阵，且惯性矩阵必须经计算得出，如果随意定义刚体部分的惯性矩阵，那么可能会导致机器人在 Gazebo 中出现抖动，移动等现象。</p>
<h3 id="3-颜色设置"><a href="#3-颜色设置" class="headerlink" title="3.颜色设置"></a>3.颜色设置</h3><p>在 gazebo 中显示 link 的颜色，必须要使用指定的标签:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;link节点名称&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Blue<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure>

<p><strong>PS：</strong>material 标签中，设置的值区分大小写，颜色可以设置为 Red Blue Green Black …..</p>
<h2 id="6-6-3-URDF集成Gazebo实操"><a href="#6-6-3-URDF集成Gazebo实操" class="headerlink" title="6.6.3 URDF集成Gazebo实操"></a>6.6.3 URDF集成Gazebo实操</h2><p><strong>需求描述:</strong></p>
<p>将之前的机器人模型(xacro版)显示在 gazebo 中</p>
<p><strong>结果演示:</strong></p>
<p><img src="/2024/06/08/6-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E4%BB%BF%E7%9C%9F/18_gazebo%E6%A1%88%E4%BE%8B.png" alt="18_gazebo案例"></p>
<p><em>实现流程:</em>*</p>
<ol>
<li>需要编写封装惯性矩阵算法的 xacro 文件</li>
<li>为机器人模型中的每一个 link 添加 collision 和 inertial 标签，并且重置颜色属性</li>
<li>在 launch 文件中启动 gazebo 并添加机器人模型</li>
</ol>
<h3 id="1-编写封装惯性矩阵算法的-xacro-文件"><a href="#1-编写封装惯性矩阵算法的-xacro-文件" class="headerlink" title="1.编写封装惯性矩阵算法的 xacro 文件"></a>1.编写封装惯性矩阵算法的 xacro 文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;base&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Macro for inertia matrix --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;sphere_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m r&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> <span class="attr">ixy</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ixz</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">iyy</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> <span class="attr">iyz</span>=<span class="string">&quot;0&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">izz</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;cylinder_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m r h&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;m*(3*r*r+h*h)/12&#125;&quot;</span> <span class="attr">ixy</span> = <span class="string">&quot;0&quot;</span> <span class="attr">ixz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">iyy</span>=<span class="string">&quot;$&#123;m*(3*r*r+h*h)/12&#125;&quot;</span> <span class="attr">iyz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">izz</span>=<span class="string">&quot;$&#123;m*r*r/2&#125;&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;Box_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m l w h&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;m*(h*h + l*l)/12&#125;&quot;</span> <span class="attr">ixy</span> = <span class="string">&quot;0&quot;</span> <span class="attr">ixz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">iyy</span>=<span class="string">&quot;$&#123;m*(w*w + l*l)/12&#125;&quot;</span> <span class="attr">iyz</span>= <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">izz</span>=<span class="string">&quot;$&#123;m*(w*w + h*h)/12&#125;&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-复制相关-xacro-文件，并设置-collision-inertial-以及-color-等参数"><a href="#2-复制相关-xacro-文件，并设置-collision-inertial-以及-color-等参数" class="headerlink" title="2.复制相关 xacro 文件，并设置 collision inertial 以及 color 等参数"></a>2.复制相关 xacro 文件，并设置 collision inertial 以及 color 等参数</h3><h4 id="A-底盘-Xacro-文件"><a href="#A-底盘-Xacro-文件" class="headerlink" title="A.底盘 Xacro 文件"></a><strong>A.底盘 Xacro 文件</strong></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    使用 xacro 优化 URDF 版的小车底盘实现：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现思路:</span></span><br><span class="line"><span class="comment">    1.将一些常量、变量封装为 xacro:property</span></span><br><span class="line"><span class="comment">      比如:PI 值、小车底盘半径、离地间距、车轮半径、宽度 ....</span></span><br><span class="line"><span class="comment">    2.使用 宏 封装驱动轮以及支撑轮实现，调用相关宏生成驱动轮与支撑轮</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根标签，必须声明 xmlns:xacro --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_base&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 封装变量、常量 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- PI 值设置精度需要高一些，否则后续车轮翻转量计算时，可能会出现肉眼不能察觉的车轮倾斜，从而导致模型抖动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;PI&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3.1415926&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 宏:黑色设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 底盘属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_footprint_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.001&quot;</span> /&gt;</span> <span class="comment">&lt;!-- base_footprint 半径  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_link_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span> /&gt;</span> <span class="comment">&lt;!-- base_link 半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_link_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span> <span class="comment">&lt;!-- base_link 长 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;earth_space&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 离地间距 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_link_m&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 质量  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 底盘 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_footprint&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;base_footprint_radius&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;base_link_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;base_link_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.5 0.3 0.0 0.5&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;base_link_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;base_link_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xacro:cylinder_inertial_matrix</span> <span class="attr">m</span>=<span class="string">&quot;$&#123;base_link_m&#125;&quot;</span> <span class="attr">r</span>=<span class="string">&quot;$&#123;base_link_radius&#125;&quot;</span> <span class="attr">h</span>=<span class="string">&quot;$&#123;base_link_length&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;base_link2base_footprint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_footprint&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 $&#123;earth_space + base_link_length / 2 &#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Yellow<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 驱动轮 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 驱动轮属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wheel_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0325&quot;</span> /&gt;</span><span class="comment">&lt;!-- 半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wheel_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span><span class="comment">&lt;!-- 宽度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wheel_m&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 质量  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 驱动轮宏实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;add_wheels&quot;</span> <span class="attr">params</span>=<span class="string">&quot;name flag&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;wheel_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;wheel_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;$&#123;PI / 2&#125; 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;wheel_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;wheel_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;$&#123;PI / 2&#125; 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xacro:cylinder_inertial_matrix</span> <span class="attr">m</span>=<span class="string">&quot;$&#123;wheel_m&#125;&quot;</span> <span class="attr">r</span>=<span class="string">&quot;$&#123;wheel_radius&#125;&quot;</span> <span class="attr">h</span>=<span class="string">&quot;$&#123;wheel_length&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 $&#123;flag * base_link_radius&#125; $&#123;-(earth_space + base_link_length / 2 - wheel_radius) &#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Red<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_wheels</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_wheels</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;-1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支撑轮 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支撑轮属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_wheel_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0075&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支撑轮半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_wheel_m&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.03&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 质量  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 支撑轮宏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;add_support_wheel&quot;</span> <span class="attr">params</span>=<span class="string">&quot;name flag&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;support_wheel_radius&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;support_wheel_radius&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xacro:sphere_inertial_matrix</span> <span class="attr">m</span>=<span class="string">&quot;$&#123;support_wheel_m&#125;&quot;</span> <span class="attr">r</span>=<span class="string">&quot;$&#123;support_wheel_radius&#125;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;flag * (base_link_radius - support_wheel_radius)&#125; 0 $&#123;-(base_link_length / 2 + earth_space / 2)&#125;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;1 1 1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Red<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_support_wheel</span> <span class="attr">name</span>=<span class="string">&quot;front&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_support_wheel</span> <span class="attr">name</span>=<span class="string">&quot;back&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;-1&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意: 如果机器人模型在 Gazebo 中产生了抖动，滑动，缓慢位移 …. 诸如此类情况，请查看</p>
<ol>
<li>惯性矩阵是否设置了，且设置是否正确合理</li>
<li>车轮翻转需要依赖于 PI 值，如果 PI 值精度偏低，也可能导致上述情况产生</li>
</ol>
<h4 id="B-摄像头-Xacro-文件"><a href="#B-摄像头-Xacro-文件" class="headerlink" title="B.摄像头 Xacro 文件"></a>B.摄像头 Xacro 文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 摄像头相关的 xacro 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_camera&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 摄像头属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头长度(x) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_width&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.025&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头宽度(y) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_height&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.025&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头高度(z) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_x&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头安装的x坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_y&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头安装的y坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_z&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;base_link_length / 2 + camera_height / 2&#125;&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头安装的z坐标:底盘高度 / 2 + 摄像头高度 / 2  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_m&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头质量 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 摄像头关节以及link --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;camera&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;$&#123;camera_length&#125; $&#123;camera_width&#125; $&#123;camera_height&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;$&#123;camera_length&#125; $&#123;camera_width&#125; $&#123;camera_height&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xacro:Box_inertial_matrix</span> <span class="attr">m</span>=<span class="string">&quot;$&#123;camera_m&#125;&quot;</span> <span class="attr">l</span>=<span class="string">&quot;$&#123;camera_length&#125;&quot;</span> <span class="attr">w</span>=<span class="string">&quot;$&#123;camera_width&#125;&quot;</span> <span class="attr">h</span>=<span class="string">&quot;$&#123;camera_height&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;camera2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;camera&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;camera_x&#125; $&#123;camera_y&#125; $&#123;camera_z&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;camera&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Blue<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="C-雷达-Xacro-文件"><a href="#C-雷达-Xacro-文件" class="headerlink" title="C.雷达 Xacro 文件"></a>C.雷达 Xacro 文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    小车底盘添加雷达</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_laser&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 雷达支架 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.15&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支架长度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支架半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_x&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支架安装的x坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_y&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支架安装的y坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_z&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;base_link_length / 2 + support_length / 2&#125;&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支架安装的z坐标:底盘高度 / 2 + 支架高度 / 2  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_m&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.02&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支架质量 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;support&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;support_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;support_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.8 0.2 0.0 0.8&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;support_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;support_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">xacro:cylinder_inertial_matrix</span> <span class="attr">m</span>=<span class="string">&quot;$&#123;support_m&#125;&quot;</span> <span class="attr">r</span>=<span class="string">&quot;$&#123;support_radius&#125;&quot;</span> <span class="attr">h</span>=<span class="string">&quot;$&#123;support_length&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;support2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;support&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;support_x&#125; $&#123;support_y&#125; $&#123;support_z&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;support&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/White<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 雷达属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;laser_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 雷达长度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;laser_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.03&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 雷达半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;laser_x&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 雷达安装的x坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;laser_y&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 雷达安装的y坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;laser_z&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;support_length / 2 + laser_length / 2&#125;&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 雷达安装的z坐标:支架高度 / 2 + 雷达高度 / 2  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;laser_m&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 雷达质量 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 雷达关节以及link --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;laser&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;laser_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;laser_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;laser_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;laser_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xacro:cylinder_inertial_matrix</span> <span class="attr">m</span>=<span class="string">&quot;$&#123;laser_m&#125;&quot;</span> <span class="attr">r</span>=<span class="string">&quot;$&#123;laser_radius&#125;&quot;</span> <span class="attr">h</span>=<span class="string">&quot;$&#123;laser_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;laser2support&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;support&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;laser&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;laser_x&#125; $&#123;laser_y&#125; $&#123;laser_z&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;laser&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Black<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="D-组合底盘、摄像头与雷达的-Xacro-文件"><a href="#D-组合底盘、摄像头与雷达的-Xacro-文件" class="headerlink" title="D.组合底盘、摄像头与雷达的 Xacro 文件"></a>D.组合底盘、摄像头与雷达的 Xacro 文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组合小车底盘与摄像头 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_car_camera&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;my_head.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;my_base.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;my_camera.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;my_laser.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-在-gazebo-中执行"><a href="#3-在-gazebo-中执行" class="headerlink" title="3.在 gazebo 中执行"></a>3.在 gazebo 中执行</h3><p>launch 文件:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将 Urdf 文件的内容加载到参数服务器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro $(find demo02_urdf_gazebo)/urdf/xacro/my_base_camera_laser.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动 gazebo --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find gazebo_ros)/launch/empty_world.launch&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在 gazebo 中显示机器人模型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;gazebo_ros&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawn_model&quot;</span> <span class="attr">name</span>=<span class="string">&quot;model&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-urdf -model mycar -param robot_description&quot;</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>ros</category>
      </categories>
      <tags>
        <tag>ros</tag>
      </tags>
  </entry>
  <entry>
    <title>1 ros概述与编程基础</title>
    <url>/2024/05/02/1-ros%E6%A6%82%E8%BF%B0%E4%B8%8E%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="ros程序实现流程"><a href="#ros程序实现流程" class="headerlink" title="ros程序实现流程"></a>ros程序实现流程</h1><ol>
<li><p>建立工作空间</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir <span class="literal">-p</span> 工作空间名/src <span class="comment">#创建多级目录</span></span><br><span class="line"><span class="built_in">rm</span> <span class="literal">-r</span> 工作空间名/src <span class="comment">#删除多级目录</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>进入工作空间并编译</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 工作空间名</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立功能包、设置依赖</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方法1</span></span><br><span class="line">catkin_create_pkg 功能包名 依赖<span class="number">1</span> 依赖<span class="number">2</span> ···</span><br><span class="line"><span class="comment">#方法2</span></span><br><span class="line">在vscode中可以直接右键工作空间下的 src 选择建立功能包</span><br></pre></td></tr></table></figure>
</li>
<li><p>在功能包的src目录下创建 文件名.cpp 文件</p>
</li>
<li><p>编写源文件</p>
<p>（1）包含头文件</p>
<p>（2）main()</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    ···</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）初始化节点</p>
<p><code>ros::init(argc, argv, &quot;节点名&quot;);</code></p>
<p>（4）创建句柄</p>
<p><code>ros::NodeHandle nh; //nh为句柄名</code></p>
<p>（5）其他代码，功能代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置输出文字格式（解决文字异常）</span></span><br><span class="line"><span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 CMakeList.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(映射名</span><br><span class="line">  src/源文件名.cpp</span><br><span class="line">)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(映射名</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建终端，启动核心：<code>roscore</code></p>
</li>
<li><p>新建终端，运行ROS代码：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过 source 命令来朱行执行setup.bash的命令，来修改环境变量</span></span><br><span class="line">source ./devel/setup.bash</span><br><span class="line"><span class="comment">#运行ros程序</span></span><br><span class="line">rosrun 功能包名 映射名</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><ol>
<li><p>“::”在c++中为：作用域分辨符（调用自定义头文件类函数）</p>
</li>
<li><p>source 命令：顺序执行文件中的命令</p>
</li>
<li><p>echo 命令：ubuntu输出命令（可利用 &gt;&gt; 重定向输出到文件中）</p>
</li>
<li><p><code>NodeHandle</code>：是ROS的一个重要组件，提供一个用于在自定义程序和ROS系统之间通信的接口</p>
</li>
<li><p><code>catkin</code>：是ROS基于 CMake 的编译构建系统，解决了多软件包构建顺序问题，可扩阿姨来项目编译，自动生成配置文件</p>
</li>
<li><p>在 vscode 中可用</p>
<p>（1）ctrl + “+”：放大界面</p>
<p>（2）crtl + shift + B 来快捷编译选择 catkin_make : build （需配置 tasks.json ）</p>
<p>（3）配置c_cpp_properties.json的 includePath 加上”&#x2F;home&#x2F;用户名&#x2F;……&#x2F;工作空间&#x2F;src&#x2F;功能包&#x2F;include&#x2F;**”</p>
<p>（4）ctrl + “&#96;”打开终端</p>
</li>
</ol>
<h1 id="launch文件的多节点启动"><a href="#launch文件的多节点启动" class="headerlink" title="launch文件的多节点启动"></a>launch文件的多节点启动</h1><ol>
<li><p>在功能包上创建 launch 文件夹并创建 .launch 文件</p>
</li>
<li><p>编写 .launch 文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span> = <span class="string">&quot;功能包名&quot;</span> <span class="attr">type</span> = <span class="string">&quot;节点文件名&quot;</span> <span class="attr">name</span> = <span class="string">&quot;映射名&quot;</span> <span class="attr">output</span> = <span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--output属性为：日志输出目标（可无）--&gt;</span></span><br><span class="line">        ···</span><br><span class="line">    <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行</p>
<p>（1）<code>source ./devel/setup.bash</code></p>
<p>（2）<code>roslaunch 功能包名 文件名.launch</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>ros</category>
      </categories>
      <tags>
        <tag>ros</tag>
      </tags>
  </entry>
  <entry>
    <title>2-ros通信机制</title>
    <url>/2024/05/03/2-ros%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="话题通信"><a href="#话题通信" class="headerlink" title="话题通信"></a>话题通信</h1><h2 id="话题通信理论模型"><a href="#话题通信理论模型" class="headerlink" title="话题通信理论模型"></a>话题通信理论模型</h2><p><img src="/2024/05/03/2-ros%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6/%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1%E7%90%86%E8%AE%BA%E6%A8%A1%E5%9E%8B.png" alt="话题通信理论模型"></p>
<p><strong>(利用XML进行信息的序列化和反序列化)</strong></p>
<ol>
<li>Talker向Mater注册信息包括话题名（topic）和RPC地址</li>
<li>Listener注册信息并订阅话题</li>
<li>ROS Master匹配信息并通过RPC将Talker的RPC地址发给Listener</li>
<li><ol start="5">
<li><ol start="6">
<li>利用RPC的通信进行TCP的3次握手建立TCP连接</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>**关注点: **</p>
<p>（1）话题设置</p>
<p>（2）发布者，订阅者实现</p>
<p>（3）消息载体</p>
<p>（其它大部分步骤已封装实现）</p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><p><strong>发布方：</strong></p>
<ol>
<li><p>包含头文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;std_msgs/String.h&quot;</span> <span class="comment">//ros普通文本类型的消息</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化 ros 节点 <code>ros::init(argc,argv,&quot;talker&quot;);</code></p>
</li>
<li><p>创建节点句柄 <code> ros::NodeHandle nh_name;</code></p>
</li>
<li><p>创建发布者对象 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ros::Publisher 发布者对象名 = 句柄名.<span class="built_in">advertise</span>&lt;信息类型&gt;(<span class="string">&quot;话题名&quot;</span>,队列大小);</span><br><span class="line">ros::Publisher pub = nh.<span class="built_in">advertise</span>&lt;std_msgs::String&gt;(<span class="string">&quot;topic&quot;</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写发布逻辑并发布信息</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ros::<span class="built_in">ok</span>(); <span class="comment">//判断节点是否存活，返回bool值</span></span><br><span class="line">std_msgs::String msg; <span class="comment">//建立消息类型</span></span><br><span class="line">msg.data = <span class="string">&quot;ABC&quot;</span>; <span class="comment">//准备发布的消息</span></span><br><span class="line">pub.<span class="built_in">publish</span>(msg); <span class="comment">//发布消息</span></span><br><span class="line"><span class="function">ros::Rate <span class="title">rate</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//设置消息发布频率为10HZ(一秒十次)</span></span><br><span class="line">rate.<span class="built_in">sleep</span>(); <span class="comment">//发布消息后调用该函数休眠进程</span></span><br><span class="line">ros::<span class="built_in">spinOnce</span>(); <span class="comment">//官方推荐的回调函数（在函数中使用回调一次）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在字符流中进行信息拼接</span></span><br><span class="line">    std::string stream ss;</span><br><span class="line">	ss &lt;&lt; <span class="string">&quot;hello --&gt; &quot;</span> &lt;&lt; num;</span><br><span class="line">	ss.<span class="built_in">str</span>().<span class="built_in">c_str</span>()； <span class="comment">//将字符流中的信息转化为字符串</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//避免中文无法识别，在main中加入</span></span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>订阅方：</strong></p>
<ol>
<li><ol start="2">
<li><ol start="3">
<li>同发布方</li>
</ol>
</li>
</ol>
</li>
<li><p>创建订阅者对象</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ros::Subscriber sub = nh.<span class="built_in">subscribe</span>(<span class="string">&quot;ropic&quot;</span>, 队列大小, 信息处理函数);</span><br></pre></td></tr></table></figure>
</li>
<li><p>处理订阅到的数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">doMsgs</span><span class="params">(<span class="type">const</span> std_msgs::String::ConstPtr &amp;msg)</span></span>&#123;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数（非循环用）</span></span><br><span class="line">ros::<span class="built_in">spin</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="问题及解决"><a href="#问题及解决" class="headerlink" title="问题及解决"></a>问题及解决</h2><p>订阅时前几条数据丢失，原因是发送数据时 publisher 还未注册完毕</p>
<p>解决：注册后，加入<code>ros::Duration(3.0).sleep() //ros持续3秒休眠延迟信息发送</code> </p>
<hr>
<h1 id="话题通信自定义msg"><a href="#话题通信自定义msg" class="headerlink" title="话题通信自定义msg"></a>话题通信自定义msg</h1><h2 id="按固定格式在固定位置创建msg文件"><a href="#按固定格式在固定位置创建msg文件" class="headerlink" title="按固定格式在固定位置创建msg文件"></a>按固定格式在固定位置创建msg文件</h2><ol>
<li><p>在功能包下新建 msg 文件夹，新建 name.msg 文件</p>
</li>
<li><p>编写</p>
<p>msgs 只是简单的文本文件，每行具有字段类型和字段名称，可以使用的字段类型有：</p>
<ul>
<li>int8, int16, int32, int64 (或者无符号类型: uint*)</li>
<li>float32, float64</li>
<li>string</li>
<li>time, duration</li>
<li>other msg files （其他msg文件）</li>
<li>variable-length array[] and fixed-length array[C] (边长和定长数组)</li>
</ul>
<p>ROS中还有一种特殊类型：<code>Header</code>，标头包含时间戳和ROS中常用的坐标帧信息。会经常看到msg文件的第一行具有<code>Header标头</code>。</p>
</li>
<li><p>例子</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string name</span><br><span class="line">uint16 age</span><br><span class="line">float64 height</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><p><strong><em>package.xml</em>中添加编译依赖与执行依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>message_generation<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>message_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">exce_depend 以前对应的是 run_depend 现在非法</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong><em>CMakeLists.txt</em>编辑 msg 相关配置</strong></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># catkin编译需要的组件中加入 message_generation，而message_generation依赖于 std_msgs，故必须有 std_msgs</span></span><br><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED COMPONENTS</span><br><span class="line">  roscpp</span><br><span class="line">  rospy</span><br><span class="line">  std_msgs</span><br><span class="line">  message_generation</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 msg 源文件</span></span><br><span class="line">add_message_files(</span><br><span class="line">  FILES</span><br><span class="line">  Person.msg</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成自定义 msg 时所需的依赖列表</span></span><br><span class="line">generate_messages(</span><br><span class="line">  DEPENDENCIES</span><br><span class="line">  std_msgs</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本项在文件中原本为被注释项，应该是在生成功能包添加依赖时 catkin 自动设置默认为创建以来，现发生变动故添加各项依赖（含创建依赖和新加依赖）</span></span><br><span class="line"><span class="comment"># 执行时依赖</span></span><br><span class="line">catkin_package(</span><br><span class="line"><span class="comment">#  INCLUDE_DIRS include</span></span><br><span class="line"><span class="comment">#  LIBRARIES demo02_talker_listener</span></span><br><span class="line">  CATKIN_DEPENDS roscpp rospy std_msgs message_runtime</span><br><span class="line"><span class="comment">#  DEPENDS system_lib</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>编译</strong></p>
<p>c++：产生的中间文件可以在 devel 文件夹下的 include 文件夹中的 xxx.h</p>
<p>python：产生的中间文件可以在 devel 文件夹下的 lib 文件夹中的 xxx.h</p>
<h2 id="自定义msg文件的使用"><a href="#自定义msg文件的使用" class="headerlink" title="自定义msg文件的使用"></a>自定义msg文件的使用</h2><ol>
<li><p>在xxx.cpp文体中加入<code># include &quot;功能包名/name.h&quot;</code></p>
</li>
<li><p>修改 CMakeList</p>
<p>需要添加 <strong>add_dependencies</strong> 用以设置所依赖的消息相关的中间文件。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(person_talker src/person_talker.cpp)</span><br><span class="line"><span class="keyword">add_executable</span>(person_listener src/person_listener.cpp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多一个修改项，添加依赖</span></span><br><span class="line"><span class="keyword">add_dependencies</span>(person_talker <span class="variable">$&#123;PROJECT_NAME&#125;</span>_generate_messages_cpp)</span><br><span class="line"><span class="keyword">add_dependencies</span>(person_listener <span class="variable">$&#123;PROJECT_NAME&#125;</span>_generate_messages_cpp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(person_talker</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(person_listener</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 vscode 中使用可以配置一下 c_cpp_properties.json 来实现代码提示并避免抛异常将 head 文件路径添加到 includePath 中，在 vscode 终端中使用 <code>pwd</code> 命令可显示当前文件所在位置的路径</p>
</li>
</ol>
<hr>
<h1 id="服务通信"><a href="#服务通信" class="headerlink" title="服务通信"></a>服务通信</h1><p><strong>概念：</strong>以<strong>请求响应</strong>的方式实现不同节点之间数据交互的通信模式</p>
<p><strong>作用：</strong>用于偶然性、对实时性有要求，有一定逻辑处理需求的数据传输场景</p>
<p><img src="/2024/05/03/2-ros%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6/%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1%E7%90%86%E8%AE%BA%E6%A8%A1%E5%9E%8B.png" alt="服务通信理论模型"></p>
<ol>
<li><ol start="2">
<li>向 ROS Master 注册自身信息，包括请求或提供的服务名，Master会将信息加入注册表中</li>
</ol>
</li>
<li><p>Master 进行信息匹配，并向 Client 发送 Server 的 TCP 地址</p>
</li>
<li><p>建立 TCP 连接 Client 向 Server 提交请求</p>
</li>
<li><p>接收解析请求信息并响应结果返回给 Client</p>
</li>
</ol>
<h2 id="自定义-srv-文件"><a href="#自定义-srv-文件" class="headerlink" title="自定义 srv 文件"></a>自定义 srv 文件</h2><h3 id="1-按固定格式创建-srv-文件"><a href="#1-按固定格式创建-srv-文件" class="headerlink" title="1.按固定格式创建 srv 文件"></a>1.按固定格式创建 srv 文件</h3><ol>
<li><p>功能包下新建 srv 文件夹，新建 .srv 文件</p>
</li>
<li><p>编辑 srv 文件</p>
<p>（1）可使用类型同 .msg 文件</p>
<p>（2）请求与响应按 <code>---</code> 分隔</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"># 客户端请求时发送的两个数字</span><br><span class="line">int32 num1</span><br><span class="line">int32 num2</span><br><span class="line">---</span><br><span class="line"># 服务器响应发送的数据</span><br><span class="line">int32 sum</span><br></pre></td></tr></table></figure>

<h3 id="2-编辑配置文件"><a href="#2-编辑配置文件" class="headerlink" title="2.编辑配置文件"></a>2.编辑配置文件</h3><p><strong>package.xml</strong>中添加编译依赖与执行依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>message_generation<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>message_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">exce_depend 以前对应的是 run_depend 现在非法</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>CMakeLists.txt</strong>编辑 srv 相关配置</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED COMPONENTS</span><br><span class="line">  roscpp</span><br><span class="line">  rospy</span><br><span class="line">  std_msgs</span><br><span class="line">  message_generation</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 需要加入 message_generation,必须有 std_msgs</span></span><br><span class="line"></span><br><span class="line">add_service_files(</span><br><span class="line">  FILES</span><br><span class="line">  xxx.srv</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">generate_messages(</span><br><span class="line">  DEPENDENCIES</span><br><span class="line">  std_msgs</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: 官网没有在 catkin_package 中配置 message_runtime,经测试配置也可以</span></span><br><span class="line"><span class="comment"># 执行时依赖</span></span><br><span class="line">catkin_package(</span><br><span class="line"><span class="comment">#  INCLUDE_DIRS include</span></span><br><span class="line"><span class="comment">#  LIBRARIES demo02_talker_listener</span></span><br><span class="line">  CATKIN_DEPENDS roscpp rospy std_msgs message_runtime</span><br><span class="line"><span class="comment">#  DEPENDS system_lib</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>编译后的中间文件查看：C++ 需要调用的中间文件(…&#x2F;工作空间&#x2F;devel&#x2F;include&#x2F;包名&#x2F;xxx.h)</p>
<h2 id="自定义-srv-文件的使用"><a href="#自定义-srv-文件的使用" class="headerlink" title="自定义 srv 文件的使用"></a>自定义 srv 文件的使用</h2><h3 id="服务器实现"><a href="#服务器实现" class="headerlink" title="服务器实现"></a>服务器实现</h3><ol>
<li><p>包含头文件</p>
<p><code># include &quot;功能包名/SrvName.h&quot;</code></p>
</li>
<li><p>初始化 ros 节点，创建 ros 句柄</p>
</li>
<li><p>创建服务对象</p>
<p><code>ros::ServiceServer server = nh.advertiseService(&quot;服务名&quot;,doReq);</code></p>
</li>
<li><p>处理请求并响应</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">xxx</span><span class="params">(功能包名::SrvName::Request &amp;req, 功能包名::SrvName::Response &amp;resp)</span></span>&#123;</span><br><span class="line">	<span class="comment">//可以通过 req.xx 来访问 srv 文件的请求数据</span></span><br><span class="line">	<span class="comment">//可以通过 resp.xx 来准备 srv 文件的响应数据</span></span><br><span class="line">    ···</span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;&quot;</span>); <span class="comment">//ROS信息打印</span></span><br><span class="line">    <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;···&quot;</span>); <span class="comment">//用于异常反馈</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>回调函数</p>
<p><code>ros::spin();</code></p>
</li>
</ol>
<h3 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h3><ol>
<li><p>包含头文件</p>
<p><code># include &quot;功能包名/SrvName.h&quot;</code></p>
</li>
<li><p>初始化 ros 节点，创建 ros 句柄</p>
</li>
<li><p>创建客户端对象</p>
<p><code>ros::Service Client = nh.serviceclient&lt;功能包名::SrvName&gt;(&quot;服务名&quot;)</code></p>
</li>
<li><p>组织请求数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">功能包名::SrvName xxx; <span class="comment">//定义srv变量</span></span><br><span class="line"><span class="comment">//设置请求数据</span></span><br><span class="line">xxx.request.aa = aaa; </span><br><span class="line">xxx.request.bb = bbb; </span><br></pre></td></tr></table></figure>
</li>
<li><p>发送请求返回 bool 值标记是否成功</p>
<p><code>bool flag = 客户端对象.call(srv变量);</code></p>
</li>
<li><p>处理请求</p>
<p>失败时多用 <strong>ROS_ERROR</strong> 打印日志，<code>return 1;</code></p>
</li>
</ol>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ol>
<li><p>动态传参</p>
<p><strong>启动命令：</strong><code>rosrun 功能包名 映射名 参数1 参数2 ···</code></p>
<p>main 的 <strong>argc</strong> 为传递的参数个数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">功能包::SrvName xxx;</span><br><span class="line">xxx.request.aa = <span class="built_in">atoi</span>(argv[<span class="number">1</span>]);</span><br><span class="line">xxx.request.bb = <span class="built_in">atoi</span>(argv[<span class="number">2</span>]);</span><br><span class="line">···</span><br></pre></td></tr></table></figure>
</li>
<li><p>处理客户端先启动时的运行失败</p>
<p>在客户端第5步发送请求前，添加</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line">ros::service::<span class="built_in">waitForService</span>(<span class="string">&quot;服务名&quot;</span>);</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line">client.<span class="built_in">waitForExistence</span>();</span><br></pre></td></tr></table></figure>

<p>以阻塞进程，当服务启动后才继续执行</p>
</li>
</ol>
<h3 id="修改CMakeList-txt"><a href="#修改CMakeList-txt" class="headerlink" title="修改CMakeList.txt"></a>修改CMakeList.txt</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(AddInts_Server src/AddInts_Server.cpp)</span><br><span class="line"><span class="keyword">add_executable</span>(AddInts_Client src/AddInts_Client.cpp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_dependencies</span>(AddInts_Server <span class="variable">$&#123;PROJECT_NAME&#125;</span>_gencpp)</span><br><span class="line"><span class="keyword">add_dependencies</span>(AddInts_Client <span class="variable">$&#123;PROJECT_NAME&#125;</span>_gencpp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(AddInts_Server</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(AddInts_Client</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h1 id="参数服务器"><a href="#参数服务器" class="headerlink" title="参数服务器"></a>参数服务器</h1><p><strong>定义：</strong>以共享的方式实现不同节点之间的数据交互的通信模式，在参数服务器中存储一些多节点共享数据，各节点皆可存取（参数服务器不是为高性能而设计的）</p>
<h2 id="参数服务器理论模型"><a href="#参数服务器理论模型" class="headerlink" title="参数服务器理论模型"></a>参数服务器理论模型</h2><p><img src="/2024/05/03/2-ros%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6/%E5%8F%82%E6%95%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%90%86%E8%AE%BA%E6%A8%A1%E5%9E%8B.png" alt="参数服务器理论模型"></p>
<ol>
<li><p>Talker 设置参数：Talker 通过 RPC 向参数服务器发送参数(包括参数名与参数值)，ROS Master 将参数保存到参数列表中。</p>
</li>
<li><p>Listener 获取参数：Listener 通过 RPC 向参数服务器发送参数查找请求，请求中包含要查找的参数名。</p>
</li>
<li><p>ROS Master 向 Listener 发送参数值：ROS Master 根据步骤2请求提供的参数名查找参数值，并将查询结果通过 RPC 发送给 Listener。</p>
</li>
</ol>
<h2 id="设置、修改、删除参数"><a href="#设置、修改、删除参数" class="headerlink" title="设置、修改、删除参数"></a>设置、修改、删除参数</h2><p>在 roscpp 中提供了两套 API 实现参数操作（可设置的参数：整形、浮点、字符串、bool、列表、字典等类型参数）</p>
<ol>
<li><p>获取参数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line">ros::NodeHandle nh;</span><br><span class="line">nh.<span class="built_in">setParam</span>(<span class="string">&quot;键&quot;</span>,值));</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line">ros::param::<span class="built_in">set</span>(<span class="string">&quot;键&quot;</span>,<span class="string">&quot;值&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置演示</span></span><br><span class="line">nh.<span class="built_in">setParam</span>(<span class="string">&quot;nh_int&quot;</span>,<span class="number">10</span>); <span class="comment">//整型</span></span><br><span class="line">nh.<span class="built_in">setParam</span>(<span class="string">&quot;nh_double&quot;</span>,<span class="number">3.14</span>); <span class="comment">//浮点型s</span></span><br><span class="line"></span><br><span class="line">ros::param::<span class="built_in">set</span>(<span class="string">&quot;param_int&quot;</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改参数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改演示(相同的键，不同的值)</span></span><br><span class="line">nh.<span class="built_in">setParam</span>(<span class="string">&quot;nh_int&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">ros::param::<span class="built_in">set</span>(<span class="string">&quot;param_int&quot;</span>,<span class="number">10000</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除参数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除演示</span></span><br><span class="line">nh.<span class="built_in">deleteParam</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">ros::param::<span class="built_in">del</span>(<span class="string">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h2><p>在 roscpp 中提供了两套 API 实现参数操作<code>ros::NodeHandle</code>和<code>ros::param</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ros::NodeHandle nh;</span><br><span class="line"></span><br><span class="line">nh.<span class="built_in">param</span>(键,默认值);</span><br><span class="line"><span class="comment">//存在，返回对应结果，否则返回默认值</span></span><br><span class="line"></span><br><span class="line">nh.<span class="built_in">getParam</span>(键,存储结果的变量);</span><br><span class="line"><span class="comment">//存在,返回 true,且将值赋值给参数2</span></span><br><span class="line"><span class="comment">//若果键不存在，那么返回值为 false，且不为参数2赋值</span></span><br><span class="line"></span><br><span class="line">nh.<span class="built_in">getParamCached</span>(键,存储结果的变量);</span><br><span class="line"><span class="comment">//提高变量获取效率</span></span><br><span class="line"><span class="comment">//存在,返回 true,且将值赋值给参数2</span></span><br><span class="line"><span class="comment">//若果键不存在，那么返回值为 false，且不为参数2赋值</span></span><br><span class="line"></span><br><span class="line">nh.<span class="built_in">getParamNames</span>(std::vector&lt;std::string&gt;);</span><br><span class="line"><span class="comment">//获取所有的键,并存储在参数 vector 中 </span></span><br><span class="line"></span><br><span class="line">nh.<span class="built_in">hasParam</span>(键);</span><br><span class="line"><span class="comment">//是否包含某个键，存在返回 true，否则返回 false</span></span><br><span class="line"></span><br><span class="line">nh.<span class="built_in">searchParam</span>(参数<span class="number">1</span>，参数<span class="number">2</span>);</span><br><span class="line"><span class="comment">//搜索键，参数1是被搜索的键，参数2存储搜索结果的变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*==========ros::param的用法同NodeHandle==========*/</span></span><br><span class="line">ros::param::<span class="built_in">param</span>(键,默认值);</span><br><span class="line"><span class="comment">//存在，返回对应结果，否则返回默认值</span></span><br><span class="line">······</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="ros常用命令"><a href="#ros常用命令" class="headerlink" title="ros常用命令"></a>ros常用命令</h1><h2 id="rosnode"><a href="#rosnode" class="headerlink" title="rosnode"></a>rosnode</h2><p>rosnode 是用于获取节点信息的命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosnode ping    测试到节点的连接状态</span><br><span class="line">rosnode list    列出活动节点</span><br><span class="line">rosnode info    打印节点信息</span><br><span class="line">rosnode machine    列出指定设备上节点</span><br><span class="line">rosnode <span class="built_in">kill</span>    杀死某个节点</span><br><span class="line">rosnode cleanup    清除不可连接的节点</span><br></pre></td></tr></table></figure>

<ul>
<li><p>rosnode ping</p>
<p>测试到节点的连接状态</p>
</li>
<li><p>rosnode list</p>
<p>列出活动节点</p>
</li>
<li><p>rosnode info</p>
<p>打印节点信息</p>
</li>
<li><p>rosnode machine</p>
<p>列出指定设备上的节点</p>
</li>
<li><p>rosnode kill</p>
<p>杀死某个节点</p>
</li>
<li><p>rosnode cleanup</p>
<p>清除无用节点，启动乌龟节点，然后 ctrl + c 关闭，该节点并没被彻底清除，可以使用 cleanup 清除节点</p>
</li>
</ul>
<h2 id="rostopic"><a href="#rostopic" class="headerlink" title="rostopic"></a>rostopic</h2><p>rostopic 命令行工具，用于显示有关 ROS 主题的调试信息，包括发布者，订阅者，发布频率和 ROS 消息。它还包含一个实验性 Python 库，用于动态获取有关主题的信息并与之交互。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rostopic bw     显示主题使用的带宽</span><br><span class="line">rostopic delay  显示带有 header 的主题延迟</span><br><span class="line">rostopic <span class="built_in">echo</span>   打印消息到屏幕</span><br><span class="line">rostopic find   根据类型查找主题</span><br><span class="line">rostopic hz     显示主题的发布频率</span><br><span class="line">rostopic info   显示主题相关信息</span><br><span class="line">rostopic list   显示所有活动状态下的主题</span><br><span class="line">rostopic pub    将数据发布到主题</span><br><span class="line">rostopic <span class="built_in">type</span>   打印主题类型</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>rostopic list</strong>(-v)</p>
<p>直接调用即可，控制台将打印当前运行状态下的主题名称</p>
<p>rostopic list -v : 获取话题详情(比如列出：发布者和订阅者个数…)</p>
</li>
<li><p><strong>rostopic pub</strong></p>
<p>可以直接调用命令向订阅者发布消息</p>
<p>为roboware 自动生成的 发布&#x2F;订阅 模型案例中的 订阅者 发布一条字符串</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rostopic pub /主题名称 消息类型 消息内容</span><br><span class="line">rostopic pub /chatter std_msgs gagaxixi</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>rostpic echo</strong></p>
<p>获取指定话题当前发布的消息</p>
</li>
<li><p><strong>rostopic info</strong></p>
<p>获取当前话题的小关信息</p>
<p>消息类型</p>
<p>发布者信息</p>
<p>订阅者信息</p>
</li>
<li><p><strong>rostopic type</strong></p>
<p>列出话题的消息类型</p>
</li>
<li><p><strong>rostopic find 消息类型</strong></p>
<p>根据消息类型查找话题</p>
</li>
<li><p><strong>rostopic delay</strong></p>
<p>列出消息头信息</p>
</li>
<li><p><strong>rostopic hz</strong></p>
<p>列出消息发布频率</p>
</li>
<li><p><strong>rostopic bw</strong></p>
<p>列出消息发布带宽</p>
</li>
</ul>
<h2 id="rosmsg"><a href="#rosmsg" class="headerlink" title="rosmsg"></a>rosmsg</h2><p>rosmsg 是用于显示有关 ROS 消息类型的 信息的命令行工具。</p>
<p><strong>rosmsg 演示</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosmsg show    显示消息描述</span><br><span class="line">rosmsg info    显示消息信息</span><br><span class="line">rosmsg list    列出所有消息</span><br><span class="line">rosmsg md5    显示 md5 加密后的消息</span><br><span class="line">rosmsg package    显示某个功能包下的所有消息</span><br><span class="line">rosmsg packages    列出包含消息的功能包</span><br></pre></td></tr></table></figure>

<ul>
<li><p>rosmsg list</p>
<p>会列出当前 ROS 中的所有 msg</p>
</li>
<li><p>rosmsg packages</p>
<p>列出包含消息的所有包</p>
</li>
<li><p>rosmsg package</p>
<p>列出某个包下的所有msg</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">//rosmsg package 包名 </span><br><span class="line">rosmsg package turtlesim</span><br></pre></td></tr></table></figure>
</li>
<li><p>rosmsg show</p>
<p>显示消息描述</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">//rosmsg show 消息名称</span><br><span class="line">rosmsg show turtlesim/Pose</span><br><span class="line">结果:</span><br><span class="line">float32 x</span><br><span class="line">float32 y</span><br><span class="line">float32 theta</span><br><span class="line">float32 linear_velocity</span><br><span class="line">float32 angular_velocity</span><br></pre></td></tr></table></figure>
</li>
<li><p>rosmsg info</p>
<p>作用与 rosmsg show 一样</p>
</li>
</ul>
<h2 id="rosservice"><a href="#rosservice" class="headerlink" title="rosservice"></a>rosservice</h2><p>rosservice 包含用于列出和查询的 rosservice 命令行工具。</p>
<p>调用部分服务时，如果对相关工作空间没有配置 path，需要进入工作空间调用 source .&#x2F;devel&#x2F;setup.bash</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosservice args 打印服务参数</span><br><span class="line">rosservice call    使用提供的参数调用服务</span><br><span class="line">rosservice find    按照服务类型查找服务</span><br><span class="line">rosservice info    打印有关服务的信息</span><br><span class="line">rosservice list    列出所有活动的服务</span><br><span class="line">rosservice <span class="built_in">type</span>    打印服务类型</span><br><span class="line">rosservice uri    打印服务的 ROSRPC uri</span><br></pre></td></tr></table></figure>

<ul>
<li><p>rosservice list</p>
<p>列出所有活动的 service</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">~ rosservice list</span><br><span class="line"></span><br><span class="line">/<span class="built_in">clear</span></span><br><span class="line">/<span class="built_in">kill</span></span><br><span class="line">/listener/get_loggers</span><br><span class="line">/listener/set_logger_level</span><br><span class="line">/reset</span><br><span class="line">/rosout/get_loggers</span><br><span class="line">/rosout/set_logger_level</span><br><span class="line">/rostopic_4985_1578723066421/get_loggers</span><br><span class="line">/rostopic_4985_1578723066421/set_logger_level</span><br><span class="line">/rostopic_5582_1578724343069/get_loggers</span><br><span class="line">/rostopic_5582_1578724343069/set_logger_level</span><br><span class="line">/spawn</span><br><span class="line">/turtle1/set_pen</span><br><span class="line">/turtle1/teleport_absolute</span><br><span class="line">/turtle1/teleport_relative</span><br><span class="line">/turtlesim/get_loggers</span><br><span class="line">/turtlesim/set_logger_level</span><br></pre></td></tr></table></figure>
</li>
<li><p>rosservice args</p>
<p>打印服务参数</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosservice args /spawn</span><br><span class="line">x y theta name</span><br></pre></td></tr></table></figure>
</li>
<li><p>rosservice call</p>
<p>调用服务</p>
<p>为小乌龟的案例生成一只新的乌龟</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosservice call /spawn <span class="string">&quot;x: 1.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">y: 2.0</span></span><br><span class="line"><span class="string">theta: 0.0</span></span><br><span class="line"><span class="string">name: &#x27;xxx&#x27;&quot;</span></span><br><span class="line">name: <span class="string">&quot;xxx&quot;</span></span><br><span class="line"></span><br><span class="line">//生成一只叫 xxx 的乌龟</span><br></pre></td></tr></table></figure>
</li>
<li><p>rosservice find</p>
<p>根据消息类型获取话题</p>
</li>
<li><p>rosservice info</p>
<p>获取服务话题详情</p>
</li>
<li><p>rosservice type</p>
<p>获取消息类型</p>
</li>
<li><p>rosservice uri</p>
<p>获取服务器 uri</p>
</li>
</ul>
<h2 id="rossrv"><a href="#rossrv" class="headerlink" title="rossrv"></a>rossrv</h2><p>rossrv 是用于显示有关 ROS 服务类型的信息的命令行工具，与 rosmsg 使用语法高度雷同。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rossrv show    显示服务消息详情</span><br><span class="line">rossrv info    显示服务消息相关信息</span><br><span class="line">rossrv list    列出所有服务信息</span><br><span class="line">rossrv md5    显示 md5 加密后的服务消息</span><br><span class="line">rossrv package    显示某个包下所有服务消息</span><br><span class="line">rossrv packages    显示包含服务消息的所有包</span><br></pre></td></tr></table></figure>

<ul>
<li><p>rossrv list</p>
<p>会列出当前 ROS 中的所有 srv 消息</p>
</li>
<li><p>rossrv packages</p>
<p>列出包含服务消息的所有包</p>
</li>
<li><p>rossrv package</p>
<p>列出某个包下的所有msg</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">//rossrv package 包名 </span><br><span class="line">rossrv package turtlesim</span><br></pre></td></tr></table></figure>
</li>
<li><p>rossrv show</p>
<p>显示消息描述</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">//rossrv show 消息名称</span><br><span class="line">rossrv show turtlesim/Spawn</span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line">float32 x</span><br><span class="line">float32 y</span><br><span class="line">float32 theta</span><br><span class="line">string name</span><br><span class="line"><span class="literal">---</span></span><br><span class="line">string name</span><br></pre></td></tr></table></figure>
</li>
<li><p>rossrv info</p>
<p>作用与 rossrv show 一致</p>
</li>
<li><p>rossrv md5</p>
<p>对 service 数据使用 md5 校验(加密)</p>
</li>
</ul>
<h2 id="rosparam"><a href="#rosparam" class="headerlink" title="rosparam"></a>rosparam</h2><p>rosparam 包含 rosparam 命令行工具，用于使用 YAML 编码文件在参数服务器上获取和设置 ROS 参数。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosparam <span class="built_in">set</span>    设置参数</span><br><span class="line">rosparam get    获取参数</span><br><span class="line">rosparam load    从外部文件加载参数</span><br><span class="line">rosparam dump    将参数写出到外部文件</span><br><span class="line">rosparam delete    删除参数</span><br><span class="line">rosparam list    列出所有参数</span><br></pre></td></tr></table></figure>

<ul>
<li><p>rosparam list</p>
<p>列出所有参数</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosparam list</span><br><span class="line"></span><br><span class="line">//默认结果</span><br><span class="line">/rosdistro</span><br><span class="line">/roslaunch/uris/host_helloros_virtual_machine__42911</span><br><span class="line">/rosversion</span><br><span class="line">/run_id</span><br></pre></td></tr></table></figure>
</li>
<li><p>rosparam set</p>
<p>设置参数</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosparam <span class="built_in">set</span> name huluwa</span><br><span class="line"></span><br><span class="line">//再次调用 rosparam list 结果</span><br><span class="line">/name</span><br><span class="line">/rosdistro</span><br><span class="line">/roslaunch/uris/host_helloros_virtual_machine__42911</span><br><span class="line">/rosversion</span><br><span class="line">/run_id</span><br></pre></td></tr></table></figure>
</li>
<li><p>rosparam get</p>
<p>获取参数</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosparam get name</span><br><span class="line"></span><br><span class="line">//结果</span><br><span class="line">huluwa</span><br></pre></td></tr></table></figure>
</li>
<li><p>rosparam delete</p>
<p>删除参数</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosparam delete name</span><br><span class="line"></span><br><span class="line">//结果</span><br><span class="line">//去除了name</span><br></pre></td></tr></table></figure>
</li>
<li><p>rosparam load(先准备 yaml 文件)</p>
<p>从外部文件加载参数</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosparam load xxx.yaml</span><br></pre></td></tr></table></figure>
</li>
<li><p>rosparam dump</p>
<p>将参数写出到外部文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rosparam dump yyy.yaml</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ros</category>
      </categories>
      <tags>
        <tag>ros</tag>
      </tags>
  </entry>
  <entry>
    <title>3 ros通信机制的进阶</title>
    <url>/2024/05/04/3-ros%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6%E7%9A%84%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="3-1-常用API"><a href="#3-1-常用API" class="headerlink" title="3.1 常用API"></a>3.1 常用API</h1><p><strong>API（Application Programming Interface,应用程序编程接口）：</strong>是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>ros::init(argc, argv, name, options)</p>
<p><strong>参数：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> &amp;argc, <span class="type">char</span> **argv, <span class="type">const</span> std::string&amp; name, <span class="type">uint32_t</span> options = <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** @brief ROS初始化函数。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该函数可以解析并使用节点启动时传入的参数(通过参数设置节点名称、命名空间...) </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该函数有多个重载版本，如果使用NodeHandle建议调用该版本。 </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \param argc 参数个数</span></span><br><span class="line"><span class="comment"> * \param argv 参数列表</span></span><br><span class="line"><span class="comment"> * \param name 节点名称，需要保证其唯一性，不允许包含命名空间</span></span><br><span class="line"><span class="comment"> * \param options 节点启动选项，被封装进了ros::init_options</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p><strong>使用：</strong></p>
<ol>
<li><p>argc、argv</p>
<p>按照特定的格式传参，可以加以利用，如设置全局参数：<code>rosrun 包名 文件名 _变量名 := xx</code></p>
</li>
<li><p>options（同节点的多次使用）</p>
<p><code>ros::init(aergc, argv, &quot;xx&quot;, ros::init_options::AnonymousName);</code></p>
</li>
</ol>
<h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><p>ROS中时间相关的API是极其常用，比如:获取当前时刻、持续时间的设置、执行频率、休眠、定时器…都与时间相关。</p>
<h3 id="时刻"><a href="#时刻" class="headerlink" title="时刻"></a>时刻</h3><p>获取时刻，或是设置指定时刻:</p>
<ol>
<li><p>获取当前时刻 <code>ros::Time xx = ros::Time::now();</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ros::NodeHandle nh;<span class="comment">//必须创建句柄，否则时间没有初始化，导致后续API调用失败</span></span><br><span class="line">ros::Time right_now = ros::Time::<span class="built_in">now</span>();<span class="comment">//将当前时刻封装成对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取距离 1970年01月01日 00:00:00 的秒数</span></span><br><span class="line">right_now.<span class="built_in">toSec</span>() <span class="comment">//double型</span></span><br><span class="line">right_now.sec <span class="comment">//int型</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>设置指定时刻<code>ros::Time xx(···);</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ros::Time <span class="title">someTime</span><span class="params">(<span class="number">100</span>,<span class="number">100000000</span>)</span></span>;<span class="comment">// 参数1:秒数  参数2:纳秒</span></span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;时刻:%.2f&quot;</span>, someTime.<span class="built_in">toSec</span>()); <span class="comment">//100.10</span></span><br><span class="line"></span><br><span class="line"><span class="function">ros::Time <span class="title">someTime2</span><span class="params">(<span class="number">100.3</span>)</span></span>;<span class="comment">//直接传入 double 类型的秒数</span></span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;时刻:%.2f&quot;</span>, someTime2.<span class="built_in">toSec</span>()); <span class="comment">//100.30</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-持续时间"><a href="#2-持续时间" class="headerlink" title="2.持续时间"></a>2.持续时间</h3><p>设置一个时间区间(间隔):<code>ros::Duration xx(10).sleep();</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;当前时刻:%.2f&quot;</span>,ros::Time::<span class="built_in">now</span>().<span class="built_in">toSec</span>());</span><br><span class="line"></span><br><span class="line"><span class="function">ros::Duration <span class="title">du</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">//持续10秒钟,参数是double类型的，以秒为单位</span></span><br><span class="line">du.<span class="built_in">sleep</span>();<span class="comment">//按照指定的持续时间休眠</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;持续时间:%.2f&quot;</span>,du.<span class="built_in">toSec</span>());<span class="comment">//将持续时间换算成秒</span></span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;当前时刻:%.2f&quot;</span>,ros::Time::<span class="built_in">now</span>().<span class="built_in">toSec</span>());</span><br></pre></td></tr></table></figure>



<h3 id="3-持续时间与时刻运算"><a href="#3-持续时间与时刻运算" class="headerlink" title="3.持续时间与时刻运算"></a>3.持续时间与时刻运算</h3><p>为了方便使用，ROS中提供了时间与时刻的运算:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;时间运算&quot;</span>);</span><br><span class="line">ros::Time now = ros::Time::<span class="built_in">now</span>();</span><br><span class="line"><span class="function">ros::Duration <span class="title">du1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">ros::Duration <span class="title">du2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;当前时刻:%.2f&quot;</span>,now.<span class="built_in">toSec</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.time 与 duration 运算</span></span><br><span class="line">ros::Time after_now = now + du1;</span><br><span class="line">ros::Time before_now = now - du1;</span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;当前时刻之后:%.2f&quot;</span>,after_now.<span class="built_in">toSec</span>());</span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;当前时刻之前:%.2f&quot;</span>,before_now.<span class="built_in">toSec</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.duration 之间相互运算</span></span><br><span class="line">ros::Duration du3 = du1 + du2;</span><br><span class="line">ros::Duration du4 = du1 - du2;</span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;du3 = %.2f&quot;</span>,du3.<span class="built_in">toSec</span>());</span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;du4 = %.2f&quot;</span>,du4.<span class="built_in">toSec</span>());</span><br><span class="line"><span class="comment">//PS: time 与 time 不可以运算</span></span><br><span class="line"><span class="comment">// ros::Time nn = now + before_now;//异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.time 与 time 运算</span></span><br><span class="line">ros::Duration du = before_now - after_now;</span><br></pre></td></tr></table></figure>



<h3 id="4-设置运行频率"><a href="#4-设置运行频率" class="headerlink" title="4.设置运行频率"></a>4.设置运行频率</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ros::Rate <span class="title">rate</span><span class="params">(<span class="number">1</span>)</span></span>;<span class="comment">//指定频率</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;-----------code----------&quot;</span>);</span><br><span class="line">    rate.<span class="built_in">sleep</span>();<span class="comment">//休眠，休眠时间 = 1 / 频率。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-定时器"><a href="#5-定时器" class="headerlink" title="5.定时器"></a>5.定时器</h3><p>ROS 中内置了专门的定时器，可以实现与 ros::Rate 类似的效果:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ros::NodeHandle nh;<span class="comment">//必须创建句柄，否则时间没有初始化，导致后续API调用失败</span></span><br><span class="line"><span class="function">ros::Timer <span class="title">createTimer</span><span class="params">(Duration period, <span class="type">const</span> TimerCallback&amp; callback, <span class="type">bool</span> oneshot = <span class="literal">false</span>, <span class="type">bool</span> autostart = <span class="literal">true</span>)</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* \brief 创建一个定时器，按照指定频率调用回调函数。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* \param period 时间间隔</span></span><br><span class="line"><span class="comment">* \param callback 回调函数</span></span><br><span class="line"><span class="comment">* \param oneshot 如果设置为 true,只执行一次回调函数，设置为 false,就循环执行</span></span><br><span class="line"><span class="comment">* \param autostart 如果为true，返回已经启动的定时器,设置为 false，需要通过timer.start()手动启动</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// ros::Timer timer = nh.createTimer(ros::Duration(0.5),doSomeThing);</span></span><br><span class="line"> ros::Timer timer = nh.<span class="built_in">createTimer</span>(ros::<span class="built_in">Duration</span>(<span class="number">0.5</span>),doSomeThing,<span class="literal">true</span>);<span class="comment">//只执行一次</span></span><br><span class="line"> ros::<span class="built_in">spin</span>(); <span class="comment">//必须 spin</span></span><br></pre></td></tr></table></figure>

<p>定时器的回调函数:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">doSomeThing</span><span class="params">(<span class="type">const</span> ros::TimerEvent &amp;event)</span></span>&#123;</span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;event:%s&quot;</span>,std::<span class="built_in">to_string</span>(event.current_real.<span class="built_in">toSec</span>()).<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><p>1.节点状态判断</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** \brief 检查节点是否已经退出</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  ros::shutdown() 被调用且执行完毕后，该函数将会返回 false</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \return true 如果节点还健在, false 如果节点已经火化了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ok</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>2.节点关闭函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   关闭节点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>3.日志函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ROS_DEBUG</span>(<span class="string">&quot;hello,DEBUG&quot;</span>); <span class="comment">//不会输出</span></span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;hello,INFO&quot;</span>); <span class="comment">//默认白色字体</span></span><br><span class="line"><span class="built_in">ROS_WARN</span>(<span class="string">&quot;Hello,WARN&quot;</span>); <span class="comment">//默认黄色字体</span></span><br><span class="line"><span class="built_in">ROS_ERROR</span>(<span class="string">&quot;hello,ERROR&quot;</span>);<span class="comment">//默认红色字体</span></span><br><span class="line"><span class="built_in">ROS_FATAL</span>(<span class="string">&quot;hello,FATAL&quot;</span>);<span class="comment">//默认红色字体</span></span><br></pre></td></tr></table></figure>

<h1 id="3-2-ROS中的头文件与源文件"><a href="#3-2-ROS中的头文件与源文件" class="headerlink" title="3.2 ROS中的头文件与源文件"></a>3.2 ROS中的头文件与源文件</h1><h2 id="3-2-1-编写头文件"><a href="#3-2-1-编写头文件" class="headerlink" title="3.2.1 编写头文件"></a>3.2.1 编写头文件</h2><p>在功能包下的 include 目录下新建头文件: haha.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用ifndef,endif来限定宏定义范围</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _HAHA_H <span class="comment">//头文件名</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _HAHA_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">namespace:</span></span><br><span class="line"><span class="comment">    为了帮助编译器判断不同库中的同名函数，引入了命名空间这个概念，它可作为附加信息来区分不同库中相同名称的函数、类、变量等。使用了命名空间即定义了上下文。本质上，命名空间就是定义了一个范围配合作用域分辨符&quot;::&quot;，即可访问命名空间中的各个类。类使用只需要创建对象后，通过&quot;类.成员&quot;即可访问。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">namespace</span> hello_ns &#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">My</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span>: </span><br><span class="line">        	<span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span>; <span class="comment">//声明类 My 的函数 run()，在源文件中编写具体内容</span></span><br><span class="line">        	……</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>在 VScode 中，为了后续包含头文件时不抛出异常，请配置 .vscode 下 c_cpp_properties.json 的 includepath属性，注意要以 <code>/include/**</code>结尾</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;/home/用户/工作空间/src/功能包/include/**&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-2-2-编写源文件"><a href="#3-2-2-编写源文件" class="headerlink" title="3.2.2 编写源文件"></a>3.2.2 编写源文件</h2><p>在 &#x2F;工作空间&#x2F;src&#x2F;功能包&#x2F;src 目录下新建源文件:haha.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test_head_src/haha.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> hello_ns&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">My::run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;hello,head and src ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-3-编写可执行文件"><a href="#3-2-3-编写可执行文件" class="headerlink" title="3.2.3 编写可执行文件"></a>3.2.3 编写可执行文件</h2><p>在 &#x2F;工作空间&#x2F;src&#x2F;功能包&#x2F;src 目录下新建文件: use_head.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test_head_src/haha.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;hahah&quot;</span>);</span><br><span class="line">    hello_ns::My my;</span><br><span class="line">    my.<span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="3-2-4-编辑配置文件并执行"><a href="#3-2-4-编辑配置文件并执行" class="headerlink" title="3.2.4 编辑配置文件并执行"></a>3.2.4 编辑配置文件并执行</h2><p>头文件与源文件相关配置：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#取消第2行#include的注释，指出添加的头文件位置（估计是为了方便编译），你的功能包位置，要在其他位置之前。</span></span><br><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line"><span class="keyword">include</span></span><br><span class="line">  <span class="variable">$&#123;catkin_INCLUDE_DIRS&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 声明C++库</span></span><br><span class="line"><span class="keyword">add_library</span>(head <span class="comment"># 库的映射名</span></span><br><span class="line">  <span class="keyword">include</span>/test_head_src/haha.h</span><br><span class="line">  src/haha.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处函数的第一个参数也是库的映射名，需要与add_library的相同</span></span><br><span class="line"><span class="keyword">add_dependencies</span>(head <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_EXPORTED_TARGETS&#125; <span class="variable">$&#123;catkin_EXPORTED_TARGETS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(head</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可执行文件配置：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(use_head src/use_head.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与配置库函数的add_dependencies相同但是位置不同，为提高可读性不要乱写</span></span><br><span class="line"><span class="keyword">add_dependencies</span>(use_head <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_EXPORTED_TARGETS&#125; <span class="variable">$&#123;catkin_EXPORTED_TARGETS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#此处需要添加之前设置的 head 库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(use_head</span><br><span class="line">  head</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ros</category>
      </categories>
      <tags>
        <tag>ros</tag>
      </tags>
  </entry>
</search>
